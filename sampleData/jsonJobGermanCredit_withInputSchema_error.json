{
  "id" : "8b0ef319-6750-4f91-b358-11982a9be1e2",
  "group" : "modelop",
  "version" : 9,
  "jobType" : "MODEL_BATCH_TEST_JOB",
  "createdDate" : "2022-03-03T06:51:57.844Z",
  "lastModifiedDate" : "2022-03-03T06:52:13.201Z",
  "createdBy" : "SYSTEM",
  "lastModifiedBy" : "SYSTEM",
  "jobStatus" : "ERROR",
  "jobResult" : "UNKNOWN",
  "jobMessages" : [ "2022/3/3 6:51:59 batch job received", "2022/3/3 6:51:59 loading batch job", "2022/3/3 6:51:59 [info] Data processing function for slot 0: metrics", "2022/3/3 6:51:59 [info] Data processing function for slot 1: metrics", "2022/3/3 6:51:59 [info] Data processing function for slot 2: metrics", "2022/3/3 6:51:59 [info] input data list length:  2", "2022/3/3 6:51:59 [info] input slots list length: 2", "2022/3/3 6:51:59 [info] output data list length:  1", "2022/3/3 6:51:59 [info] output slots list length: 1", "2022/3/3 6:51:59 [info] attach_stream <<\"8b0ef319-6750-4f91-b358-11982a9be1e2\">> 1 <<\"test_result.json\">>", "2022/3/3 6:51:59 [info] attach_stream (external file) <<\"8b0ef319-6750-4f91-b358-11982a9be1e2\">> 0 <<\"baseline_data.json\">>", "2022/3/3 6:51:59 [info] sensor activated: manifold.1.records.count [<0.207.0>]", "2022/3/3 6:51:59 [info] sensor activated: manifold.1.records.size [<0.208.0>]", "2022/3/3 6:52:00 [info] sensor activated: manifold.1.records.rejected.by.encoding [<0.211.0>]", "2022/3/3 6:52:00 [info] sensor activated: manifold.1.records.rejected.by.schema [<0.215.0>]", "2022/3/3 6:52:00 [info] get_credentials for: <<\"mocaasin-test-s3.s3.us-east-2.amazonaws.com:443/1d9a7d1e-132c-4eba-9ae9-73d087420060/951f24cc-9fd2-42fd-959e-b2d9e471050e.json\">>", "2022/3/3 6:52:00 [info] credentials found with path: <<>>", "2022/3/3 6:52:00 [info] attach_stream (external file) <<\"8b0ef319-6750-4f91-b358-11982a9be1e2\">> 2 <<\"comparator_data.json\">>", "2022/3/3 6:52:00 [info] sensor activated: manifold.0.records.count [<0.212.0>]", "2022/3/3 6:52:00 [info] sensor activated: manifold.0.records.size [<0.206.0>]", "2022/3/3 6:52:00 [info] sensor activated: manifold.0.records.rejected.by.encoding [<0.214.0>]", "2022/3/3 6:52:00 [info] sensor activated: manifold.0.records.rejected.by.schema [<0.209.0>]", "2022/3/3 6:52:00 [info] get_credentials for: <<\"mocaasin-test-s3.s3.us-east-2.amazonaws.com:443/1d9a7d1e-132c-4eba-9ae9-73d087420060/0bfe1bc7-e43d-44d6-ad1b-2253d7494b76.json\">>", "2022/3/3 6:52:00 [info] credentials found with path: <<>>", "2022/3/3 6:52:00 [info] Batch 8b0ef319-6750-4f91-b358-11982a9be1e2 has been fully loaded", "2022/3/3 6:52:00 [info] Batch 8b0ef319-6750-4f91-b358-11982a9be1e2 loaded..", "2022/3/3 6:52:00 [info] Directory, /tmp/playground/30022600/outputDir, successfully created", "2022/3/3 6:52:00 [info] fetching file \".gitignore\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/755c1904-99be-4fd0-a7cf-0ad52faa948b.gitignore\" and placing it here: \"/tmp/playground/30022600\"", "2022/3/3 6:52:00 [info] get_credentials for: <<\"mocaasin-test-s3.s3.us-east-2.amazonaws.com:443/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/755c1904-99be-4fd0-a7cf-0ad52faa948b.gitignore\">>", "2022/3/3 6:52:00 [info] credentials found with path: <<>>", "2022/3/3 6:52:00 [info] fetch of file \".gitignore\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/755c1904-99be-4fd0-a7cf-0ad52faa948b.gitignore\" complete: ok", "2022/3/3 6:52:00 [info] fetching file \"sampleData/df_sample_scored.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/661d091e-c5f8-4faa-a82f-4cde590e2ca0.json\" and placing it here: \"/tmp/playground/30022600\"", "2022/3/3 6:52:00 [info] get_credentials for: <<\"mocaasin-test-s3.s3.us-east-2.amazonaws.com:443/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/661d091e-c5f8-4faa-a82f-4cde590e2ca0.json\">>", "2022/3/3 6:52:00 [info] credentials found with path: <<>>", "2022/3/3 6:52:00 [info] fetch of file \"sampleData/df_sample_scored.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/661d091e-c5f8-4faa-a82f-4cde590e2ca0.json\" complete: ok", "2022/3/3 6:52:00 [info] fetching file \"sampleData/df_baseline_scored.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/a107a6a0-f541-474e-ac71-fe747766a2b6.json\" and placing it here: \"/tmp/playground/30022600\"", "2022/3/3 6:52:00 [info] get_credentials for: <<\"mocaasin-test-s3.s3.us-east-2.amazonaws.com:443/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/a107a6a0-f541-474e-ac71-fe747766a2b6.json\">>", "2022/3/3 6:52:00 [info] credentials found with path: <<>>", "2022/3/3 6:52:00 [info] fetch of file \"sampleData/df_baseline_scored.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/a107a6a0-f541-474e-ac71-fe747766a2b6.json\" complete: ok", "2022/3/3 6:52:00 [info] fetching file \"sampleData/jsonJobWithInputSchema_germanCredit_updated.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/6eecc134-40a5-4583-80af-dc225d6a3fb1.json\" and placing it here: \"/tmp/playground/30022600\"", "2022/3/3 6:52:00 [info] get_credentials for: <<\"mocaasin-test-s3.s3.us-east-2.amazonaws.com:443/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/6eecc134-40a5-4583-80af-dc225d6a3fb1.json\">>", "2022/3/3 6:52:00 [info] credentials found with path: <<>>", "2022/3/3 6:52:00 [info] fetch of file \"sampleData/jsonJobWithInputSchema_germanCredit_updated.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/6eecc134-40a5-4583-80af-dc225d6a3fb1.json\" complete: ok", "2022/3/3 6:52:00 [info] fetching file \"sampleData/df_baseline.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/df0834bf-e495-4fbb-8fa3-77111e9f773d.json\" and placing it here: \"/tmp/playground/30022600\"", "2022/3/3 6:52:00 [info] get_credentials for: <<\"mocaasin-test-s3.s3.us-east-2.amazonaws.com:443/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/df0834bf-e495-4fbb-8fa3-77111e9f773d.json\">>", "2022/3/3 6:52:00 [info] credentials found with path: <<>>", "2022/3/3 6:52:00 [info] fetch of file \"sampleData/df_baseline.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/df0834bf-e495-4fbb-8fa3-77111e9f773d.json\" complete: ok", "2022/3/3 6:52:00 [info] fetching file \"sampleData/df_sample.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/4e6bceec-83de-4b38-bc04-f3f34b7bb320.json\" and placing it here: \"/tmp/playground/30022600\"", "2022/3/3 6:52:00 [info] get_credentials for: <<\"mocaasin-test-s3.s3.us-east-2.amazonaws.com:443/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/4e6bceec-83de-4b38-bc04-f3f34b7bb320.json\">>", "2022/3/3 6:52:00 [info] credentials found with path: <<>>", "2022/3/3 6:52:01 [info] fetch of file \"sampleData/df_sample.json\" from \"https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/4e6bceec-83de-4b38-bc04-f3f34b7bb320.json\" complete: ok", "2022/3/3 6:52:01 [info] Attempting to write to file: <<\"/tmp/playground/30022600/README.md\">>", "2022/3/3 6:52:01 [info] Attempting to write to file: <<\"/tmp/playground/30022600/metadata.json\">>", "2022/3/3 6:52:01 [info] Attempting to write to file: <<\"/tmp/playground/30022600/required_assets.json\">>", "2022/3/3 6:52:01 [info] Attempting to write to file: <<\"/tmp/playground/30022600/__moc_runtime/model_definition.job.json\">>", "2022/3/3 6:52:01 [info] Attempting to write to file: <<\"/tmp/playground/30022600/dashboard_model_demo.dmn\">>", "2022/3/3 6:52:01 [info] Attempting to write to file: <<\"/tmp/playground/30022600/custom_dashboard_monitors.py\">>", "2022/3/3 6:52:01 [info] (pre) MODEL-CONSOLE: no required libraries detected", "2022/3/3 6:52:03 [info] (pre) MODEL-CONSOLE: FastScore model runner for Python", "2022/3/3 6:52:03 [info] state changes to RUNNING", "2022/3/3 6:52:06 [info] MODEL-CONSOLE: Matplotlib created a temporary config/cache directory at /tmp/matplotlib-ty1cldjz because the default path (/fastscore/.cache/matplotlib) is not a writable directory; it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: (RecordsetBatcher) threshold set to 2", "2022/3/3 6:52:10 [info] init succeeded", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: (RecordsetBatcher) adding recordset at slot 0", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: (RecordsetBatcher) current size: 1", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: (RecordsetBatcher) threshold not reached", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: (RecordsetBatcher) adding recordset at slot 2", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: (RecordsetBatcher) current size: 2", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: (RecordsetBatcher) deliver recordsets", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: {'rawJson': '{\"versionNumber\":1,\"version\":1,\"targetEngine\":{\"versionNumber\":1088,\"version\":1088,\"tags\":[\"MYSQL\",\"SQL_SERVER\",\"SNOWFLAKE\",\"DB2\",\"CENTOS8\",\"PY36\",\"DS\",\"test\",\"DEBUG_TRUE\",\"RETAIN_FALSE\",\"default\"],\"state\":\"INIT\",\"release\":\"2.5.2+build.1760.reff72273a\",\"platform\":{\"r\":{\"system\":{\"version_info\":{\"year\":\"2017\",\"version.string\":\"R version 3.4.3 (2017-11-30)\",\"system\":\"x86_64, linux-gnu\",\"svn rev\":\"73796\",\"status\":\"\",\"platform\":\"x86_64-pc-linux-gnu\",\"os\":\"linux-gnu\",\"nickname\":\"Kite-Eating Tree\",\"month\":\"11\",\"minor\":\"4.3\",\"major\":\"3\",\"language\":\"R\",\"day\":\"30\",\"arch\":\"x86_64\"},\"version\":\"R version 3.4.3 (2017-11-30)\",\"system\":\"unix\",\"processor\":{\"arch\":\"x86_64\"},\"platform\":\"unix\",\"num_processors\":2,\"executable\":\"/usr/bin/R\",\"double_info\":[\"0.0000000000000002220446\",\"0.0000000000000001110223\",\"2.225074e-308\",\"1.797693e+308\",\"2\",\"53\",\"5\",\"0\",\"-52\",\"-53\",\"11\",\"-1022\",\"1024\",\"2147483647\",\"8\",\"8\",\"16\",\"8\"],\"architecture\":64},\"libraries\":{\"RevoMods\":\"11.0.0\",\"lattice\":\"0.20-35\",\"mrsdeploy\":\"1.1.3\",\"RUnit\":\"0.4.26\",\"Matrix\":\"1.2-12\",\"methods\":\"3.4.3\",\"cluster\":\"2.0.6\",\"tcltk\":\"3.4.3\",\"png\":\"0.1-7\",\"fastscore.io\":\"1.0\",\"base\":\"3.4.3\",\"iterators\":\"1.0.9\",\"CompatibilityAPI\":\"1.1.0\",\"MASS\":\"7.3-47\",\"nnet\":\"7.3-12\",\"grDevices\":\"3.4.3\",\"utils\":\"3.4.3\",\"RevoIOQ\":\"8.0.9\",\"deployrRserve\":\"9.0.0\",\"R6\":\"2.2.2\",\"codetools\":\"0.2-15\",\"splines\":\"3.4.3\",\"class\":\"7.3-14\",\"boot\":\"1.3-20\",\"jsonlite\":\"1.5\",\"spatial\":\"7.3-11\",\"RevoPemaR\":\"10.0.0\",\"RevoScaleR\":\"9.3.0\",\"foreign\":\"0.8-69\",\"RevoTreeView\":\"10.0.0\",\"fastscore.runner\":\"1.6\",\"compiler\":\"3.4.3\",\"nlme\":\"3.1-131\",\"RevoUtils\":\"10.0.7\",\"curl\":\"3.1\",\"survival\":\"2.41-3\",\"datasets\":\"3.4.3\",\"foreach\":\"1.4.5\",\"MicrosoftR\":\"3.4.3.0097\",\"mgcv\":\"1.8-22\",\"grid\":\"3.4.3\",\"KernSmooth\":\"2.23-15\",\"doRSR\":\"10.0.0\",\"doParallel\":\"1.0.12\",\"RevoUtilsMath\":\"10.0.1\",\"stats\":\"3.4.3\",\"stats4\":\"3.4.3\",\"graphics\":\"3.4.3\",\"rpart\":\"4.1-11\",\"parallel\":\"3.4.3\",\"RevoTDUtils\":\"1.0\",\"tools\":\"3.4.3\",\"mrupdate\":\"1.0.1\",\"checkpoint\":\"0.4.3\",\"fastscore\":\"1.6\"}},\"python\":{\"system\":{\"version_info\":[3,6,8,\"final\",0],\"version\":\"3.6.8 (default, Nov  2 2021, 13:01:57) \\\\n[GCC 8.4.1 20200928 (Red Hat 8.4.1-1)]\",\"system\":\"Linux\",\"processor\":\"x86_64\",\"platform\":\"linux\",\"num_processors\":2,\"float_info\":[1.7976931348623157e+308,1024,308,2.2250738585072014e-308,-1021,-307,15,53,2.220446049250313e-16,2,1],\"executable\":\"/usr/bin/python3\",\"architecture\":[\"64bit\",\"\"],\"api_version\":1013},\"libraries\":{\"Werkzeug\":\"2.0.3\",\"shap\":\"0.35.0\",\"modelop\":\"0.13.0\",\"tensorflow\":\"1.8.0\",\"Pillow\":\"8.4.0\",\"gast\":\"0.5.3\",\"gpg\":\"1.13.1\",\"dataclasses\":\"0.8\",\"requests\":\"2.26.0\",\"absl-py\":\"1.0.0\",\"grpcio\":\"1.43.0\",\"MarkupSafe\":\"2.0.1\",\"zipp\":\"3.6.0\",\"joblib\":\"1.1.0\",\"protobuf\":\"3.19.4\",\"PyPDF2\":\"1.26.0\",\"aequitas\":\"0.42.0\",\"SQLAlchemy\":\"1.4.31\",\"greenlet\":\"1.1.2\",\"pip\":\"21.0.1\",\"tabulate\":\"0.8.2\",\"wheel\":\"0.37.1\",\"visitor\":\"0.1.3\",\"gensim\":\"3.8.3\",\"scipy\":\"1.5.4\",\"millify\":\"0.1.1\",\"nltk\":\"3.5\",\"setuptools\":\"54.0.0\",\"typing-extensions\":\"4.1.1\",\"httplib2\":\"0.20.4\",\"smart-open\":\"5.2.1\",\"patsy\":\"0.5.2\",\"numpy\":\"1.19.5\",\"markdown2\":\"2.3.5\",\"cached-property\":\"1.5.2\",\"pyparsing\":\"3.0.7\",\"fasttext\":\"0.9.2\",\"pytz\":\"2021.3\",\"PyYAML\":\"6.0\",\"astor\":\"0.8.1\",\"python-dateutil\":\"2.8.2\",\"Flask-Bootstrap\":\"3.3.7.1\",\"scikit-learn\":\"0.22\",\"quickavro\":\"0.1.22\",\"bert\":\"2.2.0\",\"ohio\":\"0.5.0\",\"pyrsistent\":\"0.18.0\",\"webencodings\":\"0.5.1\",\"bleach\":\"1.5.0\",\"Flask\":\"0.12.2\",\"toolz\":\"0.11.2\",\"urllib3\":\"1.26.7\",\"termcolor\":\"1.1.0\",\"pybind11\":\"2.9.1\",\"statsmodels\":\"0.12.2\",\"reportlab\":\"3.6.6\",\"basho-erlastic\":\"2.1.1\",\"tensorboard\":\"1.8.0\",\"itsdangerous\":\"2.0.1\",\"six\":\"1.16.0\",\"pandas\":\"1.1.5\",\"charset-normalizer\":\"2.0.7\",\"kiwisolver\":\"1.3.1\",\"xgboost\":\"1.3.3\",\"dominate\":\"2.6.0\",\"click\":\"8.0.3\",\"seaborn\":\"0.11.2\",\"cycler\":\"0.11.0\",\"idna\":\"3.3\",\"regex\":\"2022.1.18\",\"jsonschema\":\"4.0.0\",\"h5py\":\"3.1.0\",\"Jinja2\":\"3.0.3\",\"importlib-metadata\":\"4.8.3\",\"attrs\":\"21.4.0\",\"tqdm\":\"4.62.3\",\"html5lib\":\"1.1\",\"certifi\":\"2021.10.8\",\"torch\":\"1.7.1\",\"entrypoints\":\"0.4\",\"rpm\":\"4.14.3\",\"altair\":\"4.1.0\",\"xhtml2pdf\":\"0.2.2\",\"matplotlib\":\"3.3.4\",\"msgpack\":\"1.0.2\",\"Markdown\":\"3.3.6\"}...", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: </td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>47</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>72</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>200</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"    </tr>\\\\\\\\n\\\\\",\\\\n       \\\\\"    <tr>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <th>1</th>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>0</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>binary 0/1</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>93</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>gender</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>male</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>62</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>66</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>37</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>8</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>58</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>25</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>33</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>95</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>128</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"      <td>200</td>\\\\\\\\n\\\\\",\\\\n       \\\\\"    </tr>\\\\\\\\n\\\\\",\\\\n       \\\\\"  </tbody>\\\\\\\\n\\\\\",\\\\n       \\\\\"</table>\\\\\\\\n\\\\\",\\\\n       \\\\\"</div>\\\\\"\\\\n      ],\\\\n      \\\\\"text/plain\\\\\": [\\\\n       \\\\\"   model_id score_threshold   k attribute_name attribute_value  pp  pn  fp  \\\\\\\\\\\\\\\\\\\\\\\\n\\\\\",\\\\n       \\\\\"0         0      binary 0/1  93         gender          female  31  41  14   \\\\\\\\n\\\\\",\\\\n       \\\\\"1         0      binary 0/1  93         gender            male  62  66  37   \\\\\\\\n\\\\\",\\\\n       \\\\\"\\\\\\\\n\\\\\",\\\\n       \\\\\"   fn  tn  tp  group_label_pos  group_label_neg  group_size  total_entities  \\\\\\\\n\\\\\",\\\\n       \\\\\"0   8  33  17               25               47          72             200  \\\\\\\\n\\\\\",\\\\n       \\\\\"1   8  58  25               33               95         128             200  \\\\\"\\\\n      ]\\\\n     },\\\\n     \\\\\"execution_count\\\\\": 68,\\\\n     \\\\\"metadata\\\\\": {},\\\\n     \\\\\"output_type\\\\\": \\\\\"execute_result\\\\\"\\\\n    }\\\\n   ],\\\\n   \\\\\"source\\\\\": [\\\\n    \\\\\"xtab_sample[[col for col in xtab_sample.columns if col not in absolute_metrics_sample]]\\\\\"\\\\n   ]\\\\n  },\\\\n  {\\\\n   \\\\\"cell_type\\\\\": \\\\\"markdown\\\\\",\\\\n   \\\\\"metadata\\\\\": {},\\\\n   \\\\\"source\\\\\": [\\\\n    \\\\\"That\\'s it for `Group` metrics. Let\\'s move on to `Bias` metrics.\\\\\"\\\\n   ]\\\\n  },\\\\n  {\\\\n   \\\\\"cell_type\\\\\": \\\\\"code\\\\\",\\\\n   \\\\\"execution_count\\\\\": 69,\\\\n   \\\\\"metadata\\\\\": {\\\\n    \\\\\"scrolled\\\\\": true\\\\n   },\\\\n   \\\\\"outputs\\\\\": [\\\\n    {\\\\n     \\\\\"name\\\\\": \\\\\"stdout\\\\\",\\\\n     \\\\\"output_type\\\\\": \\\\\"stream\\\\\",\\\\n     \\\\\"text\\\\\": [\\\\n      \\\\\"get_disparity_predefined_group()\\\\\\\\n\\\\\",\\\\n      \\\\\"get_disparity_predefined_group()\\\\\\\\n\\\\\"\\\\n     ]\\\\n    }\\\\n   ],\\\\n   \\\\\"source\\\\\": [\\\\n    \\\\\"b_baseline, b_sample = Bias(), Bias()\\\\\\\\n\\\\\",\\\\n    \\\\\"\\\\\\\\n\\\\\",\\\\n    \\\\\"bdf_baseline = b_baseline.get_disparity_predefined_groups(\\\\\\\\n\\\\\",\\\\n    \\\\\"    xtab_baseline, \\\\\\\\n\\\\\",\\\\n    \\\\\"    original_df=df_baseline_scored_processed, \\\\\\\\n\\\\\",\\\\n    \\\\\"    ref_groups_dict={\\'gender\\':\\'male\\'}, alpha=0.05, mask_significance=True\\\\\\\\n\\\\\",\\\\n    \\\\\")\\\\\\\\n\\\\\",\\\\n    \\\\\"\\\\\\\\n\\\\\",\\\\n    \\\\\"bdf_sample = b_sample.get_disparity_predefined_groups(\\\\\\\\n\\\\\",\\\\n    \\\\\"    xtab_sample, \\\\\\\\n\\\\\",\\\\n    \\\\\"    original_df=df_sample_scored_processed, \\\\\\\\n\\\\\",\\\\n    \\\\\"    ref_groups_dict={\\'gender\\':\\'male\\'}, alpha=0.05, mask_significance=True\\\\\\\\n\\\\\",\\\\n    \\\\\")\\\\\"\\\\n   ]\\\\n  },\\\\n  {\\\\n   \\\\\"cell_type\\\\\": \\\\\"markdown\\\\\",\\\\n   \\\\\"metadata\\\\\": {},\\\\n   \\\\\"source\\\\\": [\\\\n    \\\\\"We can now compute **disparity** metrics as follows\\\\\"\\\\n   ]\\\\n  },\\\\n  {\\\\n   \\\\\"cell_type\\\\\": \\\\\"code\\\\\",\\\\n   \\\\\"execution_count\\\\\": 70,\\\\n   \\\\\"metadata\\\\\": {},\\\\n   \\\\\"outputs\\\\\": [],\\\\n   \\\\\"source\\\\\": [\\\\n    \\\\\"calculated_disparities_baseline = b_baseline.list_disparities(bdf_baseline)\\\\\\\\n\\\\\",\\\\n    \\\\\"calculated_disparities_sample = b_sample.list_disparities(bdf_sample)\\\\\\\\n\\\\\",\\\\n    \\\\\"\\\\\\\\n\\\\\",\\\\n    \\\\\"disparity_metrics_df_baseline = bdf_baseline[\\\\\\\\n\\\\\",\\\\n    \\\\\"    [\\'attribute_name\\', \\'attribute_value\\'] + \\\\\\\\\\\\\\\\\\\\\\\\n\\\\\",\\\\n    \\\\\"        calculated_disparities_baseline\\\\\\\\n\\\\\",\\\\n    \\\\\"    ]\\\\\\\\n\\\\\",\\\\n    \\\\\"disparity_metrics_df_sample = bdf_sample[\\\\\\\\n\\\\\",\\\\n    \\\\\"    [\\'attribute_name\\', \\'attribute_value\\'] + \\\\\\\\\\\\\\\\\\\\\\\\n\\\\\",\\\\n    \\\\\"        calculated_disparities_sa...", "2022/3/3 6:52:10 [info] MODEL-CONSOLE: \\\"protectedClass\\\\\": false,\\\\n      \\\\\"driftCandidate\\\\\": true,\\\\n      \\\\\"specialValues\\\\\": [],\\\\n      \\\\\"scoringOptional\\\\\": false\\\\n    },\\\\n    {\\\\n      \\\\\"name\\\\\": \\\\\"job\\\\\",\\\\n      \\\\\"type\\\\\": \\\\\"string\\\\\",\\\\n      \\\\\"dataClass\\\\\": \\\\\"categorical\\\\\",\\\\n      \\\\\"role\\\\\": \\\\\"predictor\\\\\",\\\\n      \\\\\"protectedClass\\\\\": false,\\\\n      \\\\\"driftCandidate\\\\\": true,\\\\n      \\\\\"specialValues\\\\\": [],\\\\n      \\\\\"scoringOptional\\\\\": false\\\\n    },\\\\n    {\\\\n      \\\\\"name\\\\\": \\\\\"number_people_liable\\\\\",\\\\n      \\\\\"type\\\\\": \\\\\"int\\\\\",\\\\n      \\\\\"dataClass\\\\\": \\\\\"numerical\\\\\",\\\\n      \\\\\"role\\\\\": \\\\\"predictor\\\\\",\\\\n      \\\\\"protectedClass\\\\\": false,\\\\n      \\\\\"driftCandidate\\\\\": true,\\\\n      \\\\\"specialValues\\\\\": [],\\\\n      \\\\\"scoringOptional\\\\\": false\\\\n    },\\\\n    {\\\\n      \\\\\"name\\\\\": \\\\\"telephone\\\\\",\\\\n      \\\\\"type\\\\\": \\\\\"string\\\\\",\\\\n      \\\\\"dataClass\\\\\": \\\\\"categorical\\\\\",\\\\n      \\\\\"role\\\\\": \\\\\"predictor\\\\\",\\\\n      \\\\\"protectedClass\\\\\": false,\\\\n      \\\\\"driftCandidate\\\\\": true,\\\\n      \\\\\"specialValues\\\\\": [],\\\\n      \\\\\"scoringOptional\\\\\": false\\\\n    },\\\\n    {\\\\n      \\\\\"name\\\\\": \\\\\"foreign_worker\\\\\",\\\\n      \\\\\"type\\\\\": \\\\\"string\\\\\",\\\\n      \\\\\"dataClass\\\\\": \\\\\"categorical\\\\\",\\\\n      \\\\\"role\\\\\": \\\\\"predictor\\\\\",\\\\n      \\\\\"protectedClass\\\\\": false,\\\\n      \\\\\"driftCandidate\\\\\": true,\\\\n      \\\\\"specialValues\\\\\": [],\\\\n      \\\\\"scoringOptional\\\\\": false\\\\n    },\\\\n    {\\\\n      \\\\\"name\\\\\": \\\\\"gender\\\\\",\\\\n      \\\\\"type\\\\\": \\\\\"string\\\\\",\\\\n      \\\\\"dataClass\\\\\": \\\\\"categorical\\\\\",\\\\n      \\\\\"role\\\\\": \\\\\"predictor\\\\\",\\\\n      \\\\\"protectedClass\\\\\": true,\\\\n      \\\\\"driftCandidate\\\\\": true,\\\\n      \\\\\"specialValues\\\\\": [],\\\\n      \\\\\"scoringOptional\\\\\": true\\\\n    },\\\\n    {\\\\n      \\\\\"name\\\\\": \\\\\"label_value\\\\\",\\\\n      \\\\\"type\\\\\": \\\\\"int\\\\\",\\\\n      \\\\\"dataClass\\\\\": \\\\\"categorical\\\\\",\\\\n      \\\\\"role\\\\\": \\\\\"label\\\\\",\\\\n      \\\\\"protectedClass\\\\\": false,\\\\n      \\\\\"driftCandidate\\\\\": true,\\\\n      \\\\\"specialValues\\\\\": [],\\\\n      \\\\\"scoringOptional\\\\\": true\\\\n    },\\\\n    {\\\\n      \\\\\"name\\\\\": \\\\\"score\\\\\",\\\\n      \\\\\"type\\\\\": \\\\\"int\\\\\",\\\\n      \\\\\"dataClass\\\\\": \\\\\"categorical\\\\\",\\\\n      \\\\\"role\\\\\": \\\\\"score\\\\\",\\\\n      \\\\\"protectedClass\\\\\": false,\\\\n      \\\\\"driftCandidate\\\\\": true,\\\\n      \\\\\"specialValues\\\\\": [],\\\\n      \\\\\"scoringOptional\\\\\": true\\\\n    }\\\\n  ]\\\\n}\\\\n\",\"fileContent\":\"ewogICJuYW1lIjogImlucHV0X3NjaGVtYS5hdnNjIiwKICAidHlwZSI6ICJyZWNvcmQiLAogICJmaWVsZHMiOiBbCiAgICB7CiAgICAgICJuYW1lIjogImlkIiwKICAgICAgInR5cGUiOiAiaW50IiwKICAgICAgImRhdGFDbGFzcyI6ICJudW1lcmljYWwiLAogICAgICAicm9sZSI6ICJpZGVudGlmaWVyIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IGZhbHNlLAogICAgICAic3BlY2lhbFZhbHVlcyI6IFtdLAogICAgICAic2NvcmluZ09wdGlvbmFsIjogZmFsc2UKICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogImR1cmF0aW9uX21vbnRocyIsCiAgICAgICJ0eXBlIjogImludCIsCiAgICAgICJkYXRhQ2xhc3MiOiAibnVtZXJpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiY3JlZGl0X2Ftb3VudCIsCiAgICAgICJ0eXBlIjogImZsb2F0IiwKICAgICAgImRhdGFDbGFzcyI6ICJudW1lcmljYWwiLAogICAgICAicm9sZSI6ICJwcmVkaWN0b3IiLAogICAgICAicHJvdGVjdGVkQ2xhc3MiOiBmYWxzZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJpbnN0YWxsbWVudF9yYXRlIiwKICAgICAgInR5cGUiOiAiaW50IiwKICAgICAgImRhdGFDbGFzcyI6ICJudW1lcmljYWwiLAogICAgICAicm9sZSI6ICJwcmVkaWN0b3IiLAogICAgICAicHJvdGVjdGVkQ2xhc3MiOiBmYWxzZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJwcmVzZW50X3Jlc2lkZW5jZV9zaW5jZSIsCiAgICAgICJ0eXBlIjogImludCIsCiAgICAgICJkYXRhQ2xhc3MiOiAibnVtZXJpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIH...", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: M=\",\"assetType\":\"FILE\",\"assetRole\":\"README_FILE\",\"assetId\":\"1716eb31-0964-4b06-9f7c-97e4d122071e\"},{\"repositoryInfo\":{\"repositoryType\":\"GIT_REPO\",\"repositoryRemote\":\"https://github.com/modelop/default_dashboard_model\",\"repositoryDirectory\":\"/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783\",\"repositoryBranch\":\"master\",\"lastSyncStatus\":\"SUCCESS\",\"lastSyncMessages\":\"2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated\",\"lastCommitId\":\"929334e2cf0da9a01c0708008de0ecca22d63c26\",\"lastCommitDate\":\"2022-03-03T05:45:10Z\"},\"name\":\"metadata.json\",\"metaData\":{\"tags\":[],\"custom\":{}},\"localFile\":\"/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/metadata.json\",\"importedRepository\":{\"repositoryType\":\"GIT_REPO\",\"repositoryRemote\":\"https://github.com/modelop/default_dashboard_model\",\"repositoryDirectory\":\"/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783\",\"repositoryBranch\":\"master\",\"lastSyncStatus\":\"SUCCESS\",\"lastSyncMessages\":\"2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated\",\"lastCommitId\":\"929334e2cf0da9a01c0708008de0ecca22d63c26\",\"lastCommitDate\":\"2022-03-03T05:45:10Z\"},\"filename\":\"metadata.json\",\"fileSize\":357,\"fileFormat\":\"JSON\",\"fileContentString\":\"{\\\\n    \\\\\"tags\\\\\": [],\\\\n    \\\\\"name\\\\\": \\\\\"Default Dashboard Model\\\\\",\\\\n    \\\\\"description\\\\\": \\\\\"Runs default monitors on a base business model generating data for the main MOC Dashboard\\\\\",\\\\n    \\\\\"modelCategory\\\\\": \\\\\"MODEL_MONITORING_MODEL\\\\\",\\\\n    \\\\\"defaultAssociationRole\\\\\": \\\\\"METRICS_MODEL\\\\\",\\\\n    \\\\\"frequentlyUsed\\\\\": true,\\\\n    \\\\\"custom\\\\\": {\\\\n        \\\\\"modelopPackageVersion\\\\\": \\\\\"0.13.0\\\\\"\\\\n    }\\\\n}\\\\n\",\"fileContent\":\"ewogICAgInRhZ3MiOiBbXSwKICAgICJuYW1lIjogIkRlZmF1bHQgRGFzaGJvYXJkIE1vZGVsIiwKICAgICJkZXNjcmlwdGlvbiI6ICJSdW5zIGRlZmF1bHQgbW9uaXRvcnMgb24gYSBiYXNlIGJ1c2luZXNzIG1vZGVsIGdlbmVyYXRpbmcgZGF0YSBmb3IgdGhlIG1haW4gTU9DIERhc2hib2FyZCIsCiAgICAibW9kZWxDYXRlZ29yeSI6ICJNT0RFTF9NT05JVE9SSU5HX01PREVMIiwKICAgICJkZWZhdWx0QXNzb2NpYXRpb25Sb2xlIjogIk1FVFJJQ1NfTU9ERUwiLAogICAgImZyZXF1ZW50bHlVc2VkIjogdHJ1ZSwKICAgICJjdXN0b20iOiB7CiAgICAgICAgIm1vZGVsb3BQYWNrYWdlVmVyc2lvbiI6ICIwLjEzLjAiCiAgICB9Cn0K\",\"assetType\":\"FILE\",\"assetRole\":\"MODEL_METADATA\",\"assetId\":\"be79a32a-62b6-4e4f-a8e9-d6216523d629\"},{\"repositoryInfo\":{\"repositoryType\":\"GIT_REPO\",\"repositoryRemote\":\"https://github.com/modelop/default_dashboard_model\",\"repositoryDirectory\":\"/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783\",\"repositoryBranch\":\"master\",\"lastSyncStatus\":\"SUCCESS\",\"lastSyncMessages\":\"2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated\",\"lastCommitId\":\"929334e2cf0da9a01c0708008de0ecca22d63c26\",\"lastCommitDate\":\"2022-03-03T05:45:10Z\"},\"name\":\"required_assets.json\",\"metaData\":{\"tags\":[],\"custom\":{}},\"localFile\":\"/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/required_assets.json\",\"importedRepository\":{\"repositoryType\":\"GIT_REPO\",\"repositoryRemote\":\"https://github.com/modelop/default_dashboard_model\",\"repositoryDirectory\":\"/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783\",\"repositoryBranch\":\"master\",\"lastSyncStatus\":\"SUCCESS\",\"lastSyncMessages\":\"2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated\",\"lastCommitId\":\"929334e2cf0da9a01c0708008de0ecca22d63c26\",\"lastCommitDate\":\"2022-03-03T05:45:10Z\"},\"filename\":\"required_assets.json\",\"fileSize\":345,\"fileFormat\":\"JSON\",\"fileContentString\":\"[\\\\n    {\\\\n        \\\\\"usage\\\\\": \\\\\"INPUT_ASSET\\\\\",\\\\n        \\\\\"assetRole\\\\\": \\\\\"BASELINE_DATA\\\\\",\\\\n        \\\\\"metaData\\\\\": {\\\\n            \\\\\"description\\\\\": \\\\\"Baseline/Reference Dataset\\\\\"\\\\n        }\\\\n    },\\\\n    {\\\\n        \\\\\"usage\\\\\": \\\\\"INPUT_ASSET\\\\\",\\\\n        \\\\\"assetRole\\\\\": \\\\\"COMPARATOR_DATA\\\\\",\\\\n        \\\\\"metaData\\\\\": {\\\\n            \\\\\"description\\\\\": \\\\\"Slice of Production Data\\\\\"\\\\n        }\\\\n    }\\\\n]\\\\n\",\"fileContent\":\"WwogICAgewogICAgICAgICJ1c2FnZSI6ICJJTlBVVF9BU1NFVCIsC...", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   </tr>\\\\n\",\\n       \"  </tbody>\\\\n\",\\n       \"</table>\\\\n\",\\n       \"</div>\"\\n      ],\\n      \"text/plain\": [\\n       \"  attribute_name attribute_value   tpr   tnr   for   fdr   fpr   fnr   npv  \\\\\\\\\\\\n\",\\n       \"0         gender          female  0.80  0.67  0.14  0.43  0.33  0.20  0.86   \\\\n\",\\n       \"1         gender            male  0.76  0.72  0.12  0.49  0.28  0.24  0.88   \\\\n\",\\n       \"\\\\n\",\\n       \"   precision   ppr  pprev  prev  \\\\n\",\\n       \"0       0.57  0.34   0.50  0.35  \\\\n\",\\n       \"1       0.51  0.66   0.42  0.28  \"\\n      ]\\n     },\\n     \"execution_count\": 65,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"xtab_baseline[[\\'attribute_name\\', \\'attribute_value\\'] + absolute_metrics_baseline].round(2)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"code\",\\n   \"execution_count\": 66,\\n   \"metadata\": {},\\n   \"outputs\": [\\n    {\\n     \"data\": {\\n      \"text/html\": [\\n       \"<div>\\\\n\",\\n       \"<style scoped>\\\\n\",\\n       \"    .dataframe tbody tr th:only-of-type {\\\\n\",\\n       \"        vertical-align: middle;\\\\n\",\\n       \"    }\\\\n\",\\n       \"\\\\n\",\\n       \"    .dataframe tbody tr th {\\\\n\",\\n       \"        vertical-align: top;\\\\n\",\\n       \"    }\\\\n\",\\n       \"\\\\n\",\\n       \"    .dataframe thead th {\\\\n\",\\n       \"        text-align: right;\\\\n\",\\n       \"    }\\\\n\",\\n       \"</style>\\\\n\",\\n       \"<table border=\\\\\"1\\\\\" class=\\\\\"dataframe\\\\\">\\\\n\",\\n       \"  <thead>\\\\n\",\\n       \"    <tr style=\\\\\"text-align: right;\\\\\">\\\\n\",\\n       \"      <th></th>\\\\n\",\\n       \"      <th>attribute_name</th>\\\\n\",\\n       \"      <th>attribute_value</th>\\\\n\",\\n       \"      <th>tpr</th>\\\\n\",\\n       \"      <th>tnr</th>\\\\n\",\\n       \"      <th>for</th>\\\\n\",\\n       \"      <th>fdr</th>\\\\n\",\\n       \"      <th>fpr</th>\\\\n\",\\n       \"      <th>fnr</th>\\\\n\",\\n       \"      <th>npv</th>\\\\n\",\\n       \"      <th>precision</th>\\\\n\",\\n       \"      <th>ppr</th>\\\\n\",\\n       \"      <th>pprev</th>\\\\n\",\\n       \"      <th>prev</th>\\\\n\",\\n       \"    </tr>\\\\n\",\\n       \"  </thead>\\\\n\",\\n       \"  <tbody>\\\\n\",\\n       \"    <tr>\\\\n\",\\n       \"      <th>0</th>\\\\n\",\\n       \"      <td>gender</td>\\\\n\",\\n       \"      <td>female</td>\\\\n\",\\n       \"      <td>0.68</td>\\\\n\",\\n       \"      <td>0.70</td>\\\\n\",\\n       \"      <td>0.20</td>\\\\n\",\\n       \"      <td>0.45</td>\\\\n\",\\n       \"      <td>0.30</td>\\\\n\",\\n       \"      <td>0.32</td>\\\\n\",\\n       \"      <td>0.80</td>\\\\n\",\\n       \"      <td>0.55</td>\\\\n\",\\n       \"      <td>0.33</td>\\\\n\",\\n       \"      <td>0.43</td>\\\\n\",\\n       \"      <td>0.35</td>\\\\n\",\\n       \"    </tr>\\\\n\",\\n       \"    <tr>\\\\n\",\\n       \"      <th>1</th>\\\\n\",\\n       \"      <td>gender</td>\\\\n\",\\n       \"      <td>male</td>\\\\n\",\\n       \"      <td>0.76</td>\\\\n\",\\n       \"      <td>0.61</td>\\\\n\",\\n       \"      <td>0.12</td>\\\\n\",\\n       \"      <td>0.60</td>\\\\n\",\\n       \"      <td>0.39</td>\\\\n\",\\n       \"      <td>0.24</td>\\\\n\",\\n       \"      <td>0.88</td>\\\\n\",\\n       \"      <td>0.40</td>\\\\n\",\\n       \"      <td>0.67</td>\\\\n\",\\n       \"      <td>0.48</td>\\\\n\",\\n       \"      <td>0.26</td>\\\\n\",\\n       \"    </tr>\\\\n\",\\n       \"  </tbody>\\\\n\",\\n       \"</table>\\\\n\",\\n       \"</div>\"\\n      ],\\n      \"text/plain\": [\\n       \"  attribute_name attribute_value   tpr   tnr   for   fdr   fpr   fnr   npv  \\\\\\\\\\\\n\",\\n       \"0         gender          female  0.68  0.70  0.20  0.45  0.30  0.32  0.80   \\\\n\",\\n       \"1         gender            male  0.76  0.61  0.12  0.60  0.39  0.24  0.88   \\\\n\",\\n       \"\\\\n\",\\n       \"   precision   ppr  pprev  prev  \\\\n\",\\n       \"0       0.55  0.33   0.43  0.35  \\\\n\",\\n       \"1       0.40  0.67   0.48  0.26  \"\\n      ]\\n     },\\n     \"execution_count\": 66,\\n     \"metadata\": {},\\n     \"output_type\": \"execute_result\"\\n    }\\n   ],\\n   \"source\": [\\n    \"xtab_sample[[\\'attribute_name\\', \\'attribute_value\\'] + absolute_metrics_sample].round(2)\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"markdown\",\\n   \"metadata\": {},\\n   \"source\": [\\n    \"We can also add some raw counts (group sizes) as follows:\"\\n   ]\\n  },\\n  {\\n   \"cell_type\": \"cod...", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: e\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"installment_rate\",\\n      \"type\": \"int\",\\n      \"dataClass\": \"numerical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"present_residence_since\",\\n      \"type\": \"int\",\\n      \"dataClass\": \"numerical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"age_years\",\\n      \"type\": \"int\",\\n      \"dataClass\": \"numerical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"number_existing_credits\",\\n      \"type\": \"int\",\\n      \"dataClass\": \"numerical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"checking_status\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"credit_history\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"purpose\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"savings_account\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"present_employment_since\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"debtors_guarantors\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"property\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"installment_plans\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"housing\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"job\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"number_people_liable\",\\n      \"type\": \"int\",\\n      \"dataClass\": \"numerical\",\\n      \"role\": \"predictor\",\\n      \"protectedClass\": false,\\n      \"driftCandidate\": true,\\n      \"specialValues\": [],\\n      \"scoringOptional\": false\\n    },\\n    {\\n      \"name\": \"telephone\",\\n      \"type\": \"string\",\\n      \"dataClass\": \"categorical\",\\n      \"role\": \"predi...", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: b6705cdcb4ff258beb92bb0e', 'hashType': 'SHA-256'}, 'assetType': 'EXTERNAL_FILE', 'assetRole': 'TEST_DATA', 'assetId': '4e6bceec-83de-4b38-bc04-f3f34b7bb320'}, {'repositoryInfo': {'repositoryType': 'GIT_REPO', 'repositoryRemote': 'https://github.com/modelop/default_dashboard_model', 'repositoryDirectory': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783', 'repositoryBranch': 'master', 'lastSyncStatus': 'SUCCESS', 'lastSyncMessages': '2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated', 'lastCommitId': '929334e2cf0da9a01c0708008de0ecca22d63c26', 'lastCommitDate': '2022-03-03T05:45:10Z'}, 'metaData': {'tags': [], 'custom': {}}, 'localFile': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/README.md', 'importedRepository': {'repositoryType': 'GIT_REPO', 'repositoryRemote': 'https://github.com/modelop/default_dashboard_model', 'repositoryDirectory': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783', 'repositoryBranch': 'master', 'lastSyncStatus': 'SUCCESS', 'lastSyncMessages': '2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated', 'lastCommitId': '929334e2cf0da9a01c0708008de0ecca22d63c26', 'lastCommitDate': '2022-03-03T05:45:10Z'}, 'filename': 'README.md', 'fileSize': 23, 'fileFormat': 'UNKNOWN', 'fileContentString': '# demo_dashboard_models', 'fileContent': 'IyBkZW1vX2Rhc2hib2FyZF9tb2RlbHM=', 'assetType': 'FILE', 'assetRole': 'README_FILE', 'assetId': '1716eb31-0964-4b06-9f7c-97e4d122071e'}, {'repositoryInfo': {'repositoryType': 'GIT_REPO', 'repositoryRemote': 'https://github.com/modelop/default_dashboard_model', 'repositoryDirectory': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783', 'repositoryBranch': 'master', 'lastSyncStatus': 'SUCCESS', 'lastSyncMessages': '2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated', 'lastCommitId': '929334e2cf0da9a01c0708008de0ecca22d63c26', 'lastCommitDate': '2022-03-03T05:45:10Z'}, 'name': 'metadata.json', 'metaData': {'tags': [], 'custom': {}}, 'localFile': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/metadata.json', 'importedRepository': {'repositoryType': 'GIT_REPO', 'repositoryRemote': 'https://github.com/modelop/default_dashboard_model', 'repositoryDirectory': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783', 'repositoryBranch': 'master', 'lastSyncStatus': 'SUCCESS', 'lastSyncMessages': '2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated', 'lastCommitId': '929334e2cf0da9a01c0708008de0ecca22d63c26', 'lastCommitDate': '2022-03-03T05:45:10Z'}, 'filename': 'metadata.json', 'fileSize': 357, 'fileFormat': 'JSON', 'fileContentString': '{\\n    \"tags\": [],\\n    \"name\": \"Default Dashboard Model\",\\n    \"description\": \"Runs default monitors on a base business model generating data for the main MOC Dashboard\",\\n    \"modelCategory\": \"MODEL_MONITORING_MODEL\",\\n    \"defaultAssociationRole\": \"METRICS_MODEL\",\\n    \"frequentlyUsed\": true,\\n    \"custom\": {\\n        \"modelopPackageVersion\": \"0.13.0\"\\n    }\\n}\\n', 'fileContent': 'ewogICAgInRhZ3MiOiBbXSwKICAgICJuYW1lIjogIkRlZmF1bHQgRGFzaGJvYXJkIE1vZGVsIiwKICAgICJkZXNjcmlwdGlvbiI6ICJSdW5zIGRlZmF1bHQgbW9uaXRvcnMgb24gYSBiYXNlIGJ1c2luZXNzIG1vZGVsIGdlbmVyYXRpbmcgZGF0YSBmb3IgdGhlIG1haW4gTU9DIERhc2hib2FyZCIsCiAgICAibW9kZWxDYXRlZ29yeSI6ICJNT0RFTF9NT05JVE9SSU5HX01PREVMIiwKICAgICJkZWZhdWx0QXNzb2NpYXRpb25Sb2xlIjogIk1FVFJJQ1NfTU9ERUwiLAogICAgImZyZXF1ZW50bHlVc2VkIjogdHJ1ZSwKICAgICJjdXN0b20iOiB7CiAgICAgICAgIm1vZGVsb3BQYWNrYWdlVmVyc2lvbiI6ICIwLjEzLjAiCiAgICB9Cn0K', 'assetType': 'FILE', 'assetRole': 'MODEL_METADATA', 'assetId': 'be79a32a-62b6-4e4f-a8e9-d6216523d629'}, {'repositoryInfo': {'repositoryType': 'GIT_REPO', 'repositoryRemote': 'https://github.com/modelop/default_dashboard_model', 'repositoryDirectory': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783', 'repositoryBranch': 'master', 'lastSyncStatus': 'SUCC...", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: ----> Building monitors", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: ----> Monitors built", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: ----> Executing monitors", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: --> Executing monitor Stability Monitor", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: Init from Stability Monitor", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: Something wrong happened with Stability Monitor , sending default execution values: Expected exactly 1 input schema, found 3", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: Traceback (most recent call last):", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   File \"__model.py\", line 79, in execute_monitors", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:     monitor.init(INIT_PARAM)", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   File \"/tmp/playground/30022600/custom_dashboard_monitors.py\", line 27, in init", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:     input_schema_definition = infer.extract_input_schema(job_json)", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   File \"/usr/local/lib/python3.8/site-packages/modelop/schema/infer.py\", line 560, in extract_input_schema", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:     raise ValueError(", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: ValueError: Expected exactly 1 input schema, found 3", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: During handling of the above exception, another exception occurred:", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: Traceback (most recent call last):", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   File \"/fastscore/lib/engine-2.5.2+build.1760.reff72273a/priv/runners/python3/jet.py\", line 51, in main", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:     runner(sock_name)", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   File \"/fastscore/lib/engine-2.5.2+build.1760.reff72273a/priv/runners/python3/jet.py\", line 130, in runner", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:     handle_output(out)", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   File \"/fastscore/lib/engine-2.5.2+build.1760.reff72273a/priv/runners/python3/jet.py\", line 183, in handle_output", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:     data = [ x if isinstance(x, tuple) else (1,x) for x in output ] ## add default slot", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   File \"/fastscore/lib/engine-2.5.2+build.1760.reff72273a/priv/runners/python3/jet.py\", line 183, in <listcomp>", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:     data = [ x if isinstance(x, tuple) else (1,x) for x in output ] ## add default slot", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   File \"__model.py\", line 27, in metrics", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:     monitor_execution_results = execute_monitors(monitors_array=monitors_array, baseline=baseline,", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:   File \"__model.py\", line 90, in execute_monitors", "2022/3/3 6:52:11 [info] MODEL-CONSOLE:     monitor_execution_results.update(monitor.get_default_values_for_evaluation())", "2022/3/3 6:52:11 [info] MODEL-CONSOLE: TypeError: cannot convert dictionary update sequence element #0 to a sequence", "2022/3/3 6:52:12 [error] Model source error: Traceback (most recent call last):\n  File \"__model.py\", line 79, in execute_monitors\n    monitor.init(INIT_PARAM)\n  File \"/tmp/playground/30022600/custom_dashboard_monitors.py\", line 27, in init\n    input_schema_definition = infer.extract_input_schema(job_json)\n  File \"/usr/local/lib/python3.8/site-packages/modelop/schema/infer.py\", line 560, in extract_input_schema\n    raise ValueError(\nValueError: Expected exactly 1 input schema, found 3\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/fastscore/lib/engine-2.5.2+build.1760.reff72273a/priv/runners/python3/jet.py\", line 51, in main\n    runner(sock_name)\n  File \"/fastscore/lib/engine-2.5.2+build.1760.reff72273a/priv/runners/python3/jet.py\", line 130, in runner\n    handle_output(out)\n  File \"/fastscore/lib/engine-2.5.2+build.1760.reff72273a/priv/runners/python3/jet.py\", line 183, in handle_output\n    data = [ x if isinstance(x, tuple) else (1,x) for x in output ] ## add default slot\n  File \"/fastscore/lib/engine-2.5.2+build.1760.reff72273a/priv/runners/python3/jet.py\", line 183, in <listcomp>\n    data = [ x if isinstance(x, tuple) else (1,x) for x in output ] ## add default slot\n  File \"__model.py\", line 27, in metrics\n    monitor_execution_results = execute_monitors(monitors_array=monitors_array, baseline=baseline,\n  File \"__model.py\", line 90, in execute_monitors\n    monitor_execution_results.update(monitor.get_default_values_for_evaluation())\nTypeError: cannot convert dictionary update sequence element #0 to a sequence\n\n----> Building monitors\n----> Monitors built\n----> Executing monitors\n--> Executing monitor Stability Monitor\nInit from Stability Monitor\nSomething wrong happened with Stability Monitor , sending default execution values: Expected exactly 1 input schema, found 3\nb6705cdcb4ff258beb92bb0e', 'hashType': 'SHA-256'}, 'assetType': 'EXTERNAL_FILE', 'assetRole': 'TEST_DATA', 'assetId': '4e6bceec-83de-4b38-bc04-f3f34b7bb320'}, {'repositoryInfo': {'repositoryType': 'GIT_REPO', 'repositoryRemote': 'https://github.com/modelop/default_dashboard_model', 'repositoryDirectory': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783', 'repositoryBranch': 'master', 'lastSyncStatus': 'SUCCESS', 'lastSyncMessages': '2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated', 'lastCommitId': '929334e2cf0da9a01c0708008de0ecca22d63c26', 'lastCommitDate': '2022-03-03T05:45:10Z'}, 'metaData': {'tags': [], 'custom': {}}, 'localFile': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/README.md', 'importedRepository': {'repositoryType': 'GIT_REPO', 'repositoryRemote': 'https://github.com/modelop/default_dashboard_model', 'repositoryDirectory': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783', 'repositoryBranch': 'master', 'lastSyncStatus': 'SUCCESS', 'lastSyncMessages': '2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated', 'lastCommitId': '929334e2cf0da9a01c0708008de0ecca22d63c26', 'lastCommitDate': '2022-03-03T05:45:10Z'}, 'filename': 'README.md', 'fileSize': 23, 'fileFormat': 'UNKNOWN', 'fileContentString': '# demo_dashboard_models', 'fileContent': 'IyBkZW1vX2Rhc2hib2FyZF9tb2RlbHM=', 'assetType': 'FILE', 'assetRole': 'README_FILE', 'assetId': '1716eb31-0964-4b06-9f7c-97e4d122071e'}, {'repositoryInfo': {'repositoryType': 'GIT_REPO', 'repositoryRemote': 'https://github.com/modelop/default_dashboard_model', 'repositoryDirectory': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783', 'repositoryBranch': 'master', 'lastSyncStatus': 'SUCCESS', 'lastSyncMessages': '2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated', 'lastCommitId': '929334e2cf0da9a01c0708008de0ecca22d63c26', 'lastCommitDate': '2022-03-03T05:45:10Z'}, 'name': 'metadata.json', 'metaData': {'tags': [], 'custom': {}}, 'localFile': '/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/metadata.json', '...", "2022/3/3 6:52:12 [error] runner exits prematurely (exit status = 1)", "2022/3/3 6:52:12 [error] last input record :: {2,1,\n [<<\"{\\\"id\\\":993,\\\"duration_months\\\":36,\\\"credit_amount\\\":3959,\\\"installment_rate\\\":4,\\\"present_residence_since\\\":3,\\\"age_years\\\":30,\\\"number_existing_credits\\\":1,\\\"checking_status\\\":\\\"A11\\\",\\\"credit_history\\\":\\\"A32\\\",\\\"purpose\\\":\\\"A42\\\",\\\"savings_account\\\":\\\"A61\\\",\\\"present_employment_since\\\":\\\"A71\\\",\\\"debtors_guarantors\\\":\\\"A101\\\",\\\"property\\\":\\\"A122\\\",\\\"installment_plans\\\":\\\"A143\\\",\\\"housing\\\":\\\"A152\\\",\\\"job\\\":\\\"A174\\\",\\\"number_people_liable\\\":1,\\\"telephone\\\":\\\"A192\\\",\\\"foreign_worker\\\":\\\"A201\\\",\\\"gender\\\":\\\"male\\\",\\\"label_value\\\":0,\\\"score\\\":1}\">>,\n  <<\"{\\\"id\\\":298,\\\"duration_months\\\":18,\\\"credit_amount\\\":2515,\\\"installment_rate\\\":3,\\\"present_residence_since\\\":4,\\\"age_years\\\":43,\\\"number_existing_credits\\\":1,\\\"checking_status\\\":\\\"A14\\\",\\\"credit_history\\\":\\\"A32\\\",\\\"purpose\\\":\\\"A42\\\",\\\"savings_account\\\":\\\"A61\\\",\\\"present_employment_since\\\":\\\"A73\\\",\\\"debtors_guarantors\\\":\\\"A101\\\",\\\"property\\\":\\\"A121\\\",\\\"installment_plans\\\":\\\"A143\\\",\\\"housing\\\":\\\"A152\\\",\\\"job\\\":\\\"A173\\\",\\\"number_people_liable\\\":1,\\\"telephone\\\":\\\"A192\\\",\\\"foreign_worker\\\":\\\"A201\\\",\\\"gender\\\":\\\"male\\\",\\\"label_value\\\":0,\\\"score\\\":0}\">>,\n  <<\"{\\\"id\\\":553,\\\"duration_months\\\":12,\\\"credit_amount\\\":1995,\\\"installment_rate\\\":4,\\\"present_residence_since\\\":1,\\\"age_years\\\":27,\\\"number_existing_credits\\\":1,\\\"checking_status\\\":\\\"A12\\\",\\\"credit_history\\\":\\\"A34\\\",\\\"purpose\\\":\\\"A40\\\",\\\"savings_account\\\":\\\"A62\\\",\\\"present_employment_since\\\":\\\"A72\\\",\\\"debtors_guarantors\\\":\\\"A101\\\",\\\"property\\\":\\\"A123\\\",\\\"installment_plans\\\":\\\"A143\\\",\\\"housing\\\":\\\"A152\\\",\\\"job\\\":\\\"A173\\\",\\\"number_people_liable\\\":1,\\\"telephone\\\":\\\"A191\\\",\\\"foreign_worker\\\":\\\"A201\\\",\\\"gender\\\":\\\"male\\\",\\\"label_value\\\":0,\\\"score\\\":1}\">>,\n  <<\"{\\\"id\\\":672,\\\"duration_months\\\":60,\\\"credit_amount\\\":10366,\\\"installment_rate\\\":2,\\\"present_residence_since\\\":4,\\\"age_years\\\":42,\\\"number_existing_credits\\\":1,\\\"checking_status\\\":\\\"A14\\\",\\\"credit_history\\\":\\\"A32\\\",\\\"purpose\\\":\\\"A40\\\",\\\"savings_account\\\":\\\"A61\\\",\\\"present_employment_since\\\":\\\"A75\\\",\\\"debtors_guarantors\\\":\\\"A101\\\",\\\"property\\\":\\\"A122\\\",\\\"installment_plans\\\":\\\"A143\\\",\\\"housing\\\":\\\"A152\\\",\\\"job\\\":\\\"A174\\\",\\\"number_people_liable\\\":1,\\\"telephone\\\":\\\"A192\\\",\\\"foreign_worker\\\":\\\"A201\\\",\\\"gender\\\":\\\"male\\\",\\\"label_value\\\":0,\\\"score\\\":0}\">>,\n  <<\"{\\\"id\\\":971,\\\"duration_months\\\":24,\\\"credit_amount\\\":7393,\\\"installment_rate\\\":1,\\\"present_residence_since\\\":4,\\\"age_years\\\":43,\\\"number_existing_credits\\\":1,\\\"checking_status\\\":\\\"A14\\\",\\\"credit_history\\\":\\\"A32\\\",\\\"purpose\\\":\\\"A40\\\",\\\"savings_account\\\":\\\"A61\\\",\\\"present_employment_since\\\":\\\"A73\\\",\\\"debtors_guarantors\\\":\\\"A101\\\",\\\"property\\\":\\\"A122\\\",\\\"installment_plans\\\":\\\"A143\\\",\\\"housing\\\":\\\"A152\\\",\\\"job\\\":\\\"A172\\\",\\\"number_people_liable\\\":2,\\\"telephone\\\":\\\"A191\\\",\\\"foreign_worker\\\":\\\"A201\\\",\\\"gender\\\":\\\"male\\\",\\\"label_value\\\":0,\\\"score\\\":0}\">>,\n  <<\"{\\\"id\\\":558,\\\"duration_months\\\":24,\\\"credit_amount\\\":3552,\\\"installment_rate\\\":3,\\\"present_residence_since\\\":4,\\\"age_years\\\":27,\\\"number_existing_credits\\\":1,\\\"checking_status\\\":\\\"A11\\\",\\\"credit_history\\\":\\\"A31\\\",\\\"purpose\\\":\\\"A42\\\",\\\"savings_account\\\":\\\"A61\\\",\\\"present_employment_since\\\":\\\"A74\\\",\\\"debtors_guarantors\\\":\\\"A101\\\",\\\"property\\\":\\\"A123\\\",\\\"installment_plans\\\":\\\"A141\\\",\\\"housing\\\":\\\"A152\\\",\\\"job\\\":\\\"A173\\\",\\\"number_people_liable\\\":1,\\\"telephone\\\":\\\"A191\\\",\\\"foreign_worker\\\":\\\"A201\\\",\\\"gender\\\":\\\"male\\\",\\\"label_value\\\":1,\\\"score\\\":1}\">>,\n  <<\"{\\\"id\\\":239,\\\"duration_months\\\":30,\\\"credit_amount\\\":2522,\\\"installment_rate\\\":1,\\\"present_residence_since\\\":3,\\\"age_years\\\":39,\\\"number_existing_credits\\\":1,\\\"checking_status\\\":\\\"A11\\\",\\\"credit_history\\\":\\\"A32\\\",\\\"purpose\\\":\\\"A43\\\",\\\"savings_account\\\":\\\"A61\\\",\\\"present_employment_since\\\":\\\"A75\\\",\\\"debtors_guarantors\\\":\\\"A103\\\",\\\"property\\\":\\\"A122\\\",\\\"installment_plans\\\":\\\"A143\\\",\\\"housing\\\":\\\"A152\\\",\\\"job\\\":\\\"A173\\\",\\\"number_people_liable\\\":2,\\\"telephone\\\":\\\"A191\\\",\\\"foreign_worker\\\":\\\"A201\\\",\\\"gender\\\":\\\"male\\\",\\\"label_value\\\":0,\\\"score\\\":1}\">>,\n  <<\"{\\\"id\\\":578,\\\"duration_months\\\":36,\\\"credit_amount\\\":2820,\\\"installment_rate\\\":4,\\\"present_residence_since\\\":4,\\\"age_years\\\":2...", "2022/3/3 6:52:12 [info] closing file: <<\"/tmp/playground/batch-8b0ef319-6750-4f91-b358-11982a9be1e2/test_result.json\">>", "2022/3/3 6:52:12 [error] model error after init", "2022/3/3 6:52:12 [info] state changes to ERROR", "2022/3/3 6:52:12 [info] state changes to INIT", "2022/3/3 6:52:12 batch job failed" ],
  "enableInputSchemaChecking" : false,
  "enableOutputSchemaChecking" : false,
  "jobRunTime" : 1646290319275,
  "jobWaitTime" : 1646290319272,
  "jobEndTime" : 1646290332983,
  "lastUpdateFromRuntime" : "2022-03-03T06:52:13.201Z",
  "jobParameters" : { },
  "inputData" : [ {
    "assetId" : "951f24cc-9fd2-42fd-959e-b2d9e471050e",
    "name" : "1d9a7d1e-132c-4eba-9ae9-73d087420060/951f24cc-9fd2-42fd-959e-b2d9e471050e.json",
    "assetType" : "EXTERNAL_FILE",
    "assetRole" : "BASELINE_DATA",
    "metaData" : {
      "custom" : { },
      "tags" : [ ]
    },
    "repositoryInfo" : {
      "repositoryType" : "S3_REPOSITORY",
      "secure" : true,
      "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
      "port" : 443,
      "region" : "us-east-2"
    },
    "importedRepository" : {
      "repositoryType" : "GIT_REPO",
      "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
      "repositoryRemote" : "https://github.com/betoca/german_credit_python",
      "repositoryBranch" : "extended_schema_mrm",
      "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
      "lastSyncStatus" : "SUCCESS",
      "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
      "lastSyncDate" : "2022-03-03T06:39:09.283Z",
      "lastCommitDate" : "2021-10-12T22:24:10Z"
    },
    "contentHash" : {
      "hashType" : "SHA-256",
      "hexString" : "e170f8ca2360e82679d4633c35b2908f93a8b41bcd63d027cd500daa19da76d3"
    },
    "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/1d9a7d1e-132c-4eba-9ae9-73d087420060/951f24cc-9fd2-42fd-959e-b2d9e471050e.json",
    "filename" : "baseline_data.json",
    "fileFormat" : "JSON",
    "fileSize" : 382615
  }, {
    "assetId" : "0bfe1bc7-e43d-44d6-ad1b-2253d7494b76",
    "name" : "1d9a7d1e-132c-4eba-9ae9-73d087420060/0bfe1bc7-e43d-44d6-ad1b-2253d7494b76.json",
    "assetType" : "EXTERNAL_FILE",
    "assetRole" : "COMPARATOR_DATA",
    "metaData" : {
      "custom" : { },
      "tags" : [ ]
    },
    "repositoryInfo" : {
      "repositoryType" : "S3_REPOSITORY",
      "secure" : true,
      "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
      "port" : 443,
      "region" : "us-east-2"
    },
    "importedRepository" : {
      "repositoryType" : "GIT_REPO",
      "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
      "repositoryRemote" : "https://github.com/betoca/german_credit_python",
      "repositoryBranch" : "extended_schema_mrm",
      "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
      "lastSyncStatus" : "SUCCESS",
      "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
      "lastSyncDate" : "2022-03-03T06:39:09.283Z",
      "lastCommitDate" : "2021-10-12T22:24:10Z"
    },
    "contentHash" : {
      "hashType" : "SHA-256",
      "hexString" : "ff72c27d90eda63f11d1d21988329cae50d44101ce02d2a506b034b14d9aa3d1"
    },
    "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/1d9a7d1e-132c-4eba-9ae9-73d087420060/0bfe1bc7-e43d-44d6-ad1b-2253d7494b76.json",
    "filename" : "comparator_data.json",
    "fileFormat" : "JSON",
    "fileSize" : 47857
  } ],
  "outputData" : [ {
    "assetId" : "0318d5f7-0300-40a9-abdd-c2b0b75f8ab8",
    "name" : "test_result.json",
    "assetType" : "FILE",
    "assetRole" : "UNKNOWN",
    "metaData" : {
      "custom" : { },
      "tags" : [ ]
    },
    "filename" : "test_result.json",
    "fileFormat" : "JSON",
    "fileSize" : 0
  } ],
  "model" : {
    "id" : "2b68d871-7451-4b25-84d7-6df52f01895f",
    "group" : "ALL",
    "version" : 17,
    "createdDate" : "2022-03-03T06:34:37.568Z",
    "lastModifiedDate" : "2022-03-03T06:35:44.387Z",
    "createdBy" : "Admin",
    "lastModifiedBy" : "SYSTEM",
    "storedModel" : {
      "id" : "3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
      "group" : "ALL",
      "version" : 0,
      "createdDate" : "2022-03-03T06:34:22.733Z",
      "lastModifiedDate" : "2022-03-03T06:34:22.733Z",
      "createdBy" : "Admin",
      "lastModifiedBy" : "Admin",
      "modelMetaData" : {
        "custom" : {
          "modelopPackageVersion" : "0.13.0"
        },
        "tags" : [ ],
        "name" : "Default Dashboard Model",
        "description" : "Runs default monitors on a base business model generating data for the main MOC Dashboard",
        "type" : "PYTHON",
        "inputSchema" : [ ],
        "outputSchema" : [ ],
        "enableInputSchemaChecking" : false,
        "enableOutputSchemaChecking" : false,
        "attachments" : [ ],
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "modelCategory" : "MODEL_MONITORING_MODEL",
        "defaultAssociationRole" : "METRICS_MODEL",
        "frequentlyUsed" : true,
        "modelUseCategory" : "unassigned",
        "modelOrganization" : "company",
        "modelRisk" : "unassigned"
      },
      "modelAssets" : [ {
        "assetId" : "7ee781f0-98d1-32dd-b67b-0a5e877d5ba2",
        "name" : "dashboard_model_demo.dmn",
        "assetType" : "SOURCE_CODE",
        "assetRole" : "TEST_RESULT_COMPARATOR",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "primaryModelSource" : false,
        "sourceCode" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"https://www.omg.org/spec/DMN/20191111/MODEL/\" xmlns:dmndi=\"https://www.omg.org/spec/DMN/20191111/DMNDI/\" xmlns:dc=\"http://www.omg.org/spec/DMN/20180521/DC/\" xmlns:biodi=\"http://bpmn.io/schema/dmn/biodi/2.0\" xmlns:camunda=\"http://camunda.org/schema/1.0/dmn\" id=\"Definitions_0bxelj4\" name=\"DRD\" namespace=\"http://camunda.org/schema/1.0/dmn\" exporter=\"Camunda Modeler\" exporterVersion=\"4.11.0\">\n  <decision id=\"Decision_02utv17\" name=\"dashboard_model_demo\">\n    <decisionTable id=\"DecisionTable_0yjalvc\" hitPolicy=\"COLLECT\">\n      <input id=\"Input_1\" label=\"stability_ks_credit_history\" biodi:width=\"340\" camunda:inputVariable=\"stability_ks_credit_history\">\n        <inputExpression id=\"InputExpression_1\" typeRef=\"double\">\n          <text></text>\n        </inputExpression>\n      </input>\n      <input id=\"InputClause_1q3su5i\" label=\"performance_f1_score\" camunda:inputVariable=\"performance_f1_score\">\n        <inputExpression id=\"LiteralExpression_10l3nt5\" typeRef=\"double\">\n          <text></text>\n        </inputExpression>\n      </input>\n      <input id=\"InputClause_0wpn5rv\" label=\"bias_gender_female_statistical_parity\" camunda:inputVariable=\"bias_gender_female_statistical_parity\">\n        <inputExpression id=\"LiteralExpression_0pb81pe\" typeRef=\"double\">\n          <text></text>\n        </inputExpression>\n      </input>\n      <input id=\"InputClause_1dacs67\" label=\"bias_gender_male_statistical_parity\" camunda:inputVariable=\"bias_gender_male_statistical_parity\">\n        <inputExpression id=\"LiteralExpression_0z9ot5d\" typeRef=\"double\">\n          <text></text>\n        </inputExpression>\n      </input>\n      <output id=\"Output_1\" label=\"monitor_name\" name=\"monitor_name\" typeRef=\"string\" />\n      <output id=\"OutputClause_0vfqo80\" label=\"color\" name=\"color\" typeRef=\"string\">\n        <outputValues id=\"UnaryTests_1yx2fn3\">\n          <text>\"Gray\",\"Green\",\"Yellow\",\"Red\"</text>\n        </outputValues>\n      </output>\n      <rule id=\"DecisionRule_11vsejr\">\n        <inputEntry id=\"UnaryTests_0qcg9a0\">\n          <text>&lt; 0</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1dxwrxk\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_0y2ly43\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1uzlwlb\">\n          <text></text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_08ugghi\">\n          <text>\"Stability Monitor\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_1nu3d11\">\n          <text>\"Gray\"</text>\n        </outputEntry>\n      </rule>\n      <rule id=\"DecisionRule_1jkyop0\">\n        <inputEntry id=\"UnaryTests_1jvrf16\">\n          <text>&gt; .020</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_00znlsw\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_0hhs6b1\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1fixvqf\">\n          <text></text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_0ykjcej\">\n          <text>\"Stability Monitor\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_1tz97js\">\n          <text>\"Green\"</text>\n        </outputEntry>\n      </rule>\n      <rule id=\"DecisionRule_0wynp12\">\n        <inputEntry id=\"UnaryTests_1rqrt09\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_0tzmewz\">\n          <text>&lt; .7</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1lg4x7e\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1n20xf2\">\n          <text></text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_0o8tbuh\">\n          <text>\"Performance Monitor\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_0s6i2gl\">\n          <text>\"Green\"</text>\n        </outputEntry>\n      </rule>\n      <rule id=\"DecisionRule_10vrxl6\">\n        <inputEntry id=\"UnaryTests_04px0ey\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_0nvbvoa\">\n          <text>&gt; 0.7</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1jds0kz\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1r1n49e\">\n          <text></text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_1xecrzk\">\n          <text>\"Performance Monitor\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_0vx1a5p\">\n          <text>\"Red\"</text>\n        </outputEntry>\n      </rule>\n      <rule id=\"DecisionRule_19xn0zs\">\n        <inputEntry id=\"UnaryTests_0280vv3\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_013qhqz\">\n          <text>&lt; 0</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_18bdcwj\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_0xr8qrb\">\n          <text></text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_03uqir3\">\n          <text>\"Performance Monitor\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_0bdsds2\">\n          <text>\"Gray\"</text>\n        </outputEntry>\n      </rule>\n      <rule id=\"DecisionRule_1f15dp8\">\n        <inputEntry id=\"UnaryTests_05e8ts3\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1ipxx3e\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1dehbnh\">\n          <text>&lt;= 0.5</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_0m3mleq\">\n          <text>&lt;= 1</text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_0mcd0gz\">\n          <text>\"Bias Monitor\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_0zmbjwd\">\n          <text>\"Green\"</text>\n        </outputEntry>\n      </rule>\n      <rule id=\"DecisionRule_0th0gsq\">\n        <inputEntry id=\"UnaryTests_1848wbr\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_18c6xi6\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1htzgp1\">\n          <text>&gt; 0.5</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_099o08o\">\n          <text>&gt; 1</text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_1w9pem5\">\n          <text>\"Bias Monitor\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_0b137v2\">\n          <text>\"Red\"</text>\n        </outputEntry>\n      </rule>\n      <rule id=\"DecisionRule_0bkkqqg\">\n        <inputEntry id=\"UnaryTests_1c48kxo\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_12waidt\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1qzowau\">\n          <text>&lt;= 0.5</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1yax6wc\">\n          <text>&gt; 1</text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_187nwu4\">\n          <text>\"Bias Monitor\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_18y8vbs\">\n          <text>\"Yellow\"</text>\n        </outputEntry>\n      </rule>\n      <rule id=\"DecisionRule_1gbboyq\">\n        <inputEntry id=\"UnaryTests_0k25jlx\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_0qftdep\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_0k7t36n\">\n          <text>&gt; 0.5</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_028d40j\">\n          <text>&lt;= 1</text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_02f19u4\">\n          <text>\"Bias Monitor\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_1flj3mt\">\n          <text>\"Yellow\"</text>\n        </outputEntry>\n      </rule>\n    </decisionTable>\n  </decision>\n  <dmndi:DMNDI>\n    <dmndi:DMNDiagram>\n      <dmndi:DMNShape dmnElementRef=\"Decision_02utv17\">\n        <dc:Bounds height=\"80\" width=\"180\" x=\"160\" y=\"100\" />\n      </dmndi:DMNShape>\n    </dmndi:DMNDiagram>\n  </dmndi:DMNDI>\n</definitions>\n",
        "sourceCodeFilePath" : "dashboard_model_demo.dmn",
        "sourceCodeType" : "MODEL"
      }, {
        "assetId" : "3f711ed2-1ccf-3d25-b241-1483caf930f7",
        "name" : "main_dashboard_model.py",
        "assetType" : "SOURCE_CODE",
        "assetRole" : "MODEL_SOURCE",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "primaryModelSource" : true,
        "sourceCode" : "from datetime import datetime\nimport custom_dashboard_monitors\nimport pandas as pd\nimport modelop_sdk.dashboard.dashboard_monitor_service as dashboard_monitor_service\n\n# logger = utils.configure_logger()\n\nINPUT_JSON = {}\nINIT_PARAM = {}\n\n\n# modelop.init\ndef init(init_param):\n    global INIT_PARAM\n    INIT_PARAM = init_param\n\n\n# modelop.metrics\ndef metrics(baseline, comparator) -> dict:\n    print(INIT_PARAM)\n    print(\"----> Building monitors\")\n    monitors_array = custom_dashboard_monitors.build_monitors(INIT_PARAM)\n    print(\"----> Monitors built\")\n\n    print(\"----> Executing monitors\")\n    # execute monitors\n    monitor_execution_results = execute_monitors(monitors_array=monitors_array, baseline=baseline,\n                                                 comparator=comparator)\n    print(\"----> Monitors execution finished\")\n\n    print(f\"Results for evaluation: {str(monitor_execution_results)}\")\n    print(\"----> Starting evaluation\")\n    # performing evaluation here\n    evaluated_results = dashboard_monitor_service.evaluate_results(monitor_execution_results, \"dashboard_model_demo.dmn\")\n    print(f\"Evaluated Results: {str(evaluated_results)}\")\n    print(\"----> Evaluation finished\")\n    dashboard_result = {\n        \"createdDate\": datetime.now().strftime('%m/%d/%Y %H:%M:%S')\n    }\n\n    # Root results for dashboard\n    try:\n        print(\"----> Starting root results generation\")\n        root_results = dashboard_monitor_service.generate_root_results(monitors_array)\n        dashboard_result.update(root_results)\n        print(\"----> Root results generation finished\")\n    except Exception as e:\n        print(f\"Error: something went wrong with the dashboard root result generation, {str(e)}\")\n        dashboard_result.update(\n            {\n                \"root_elements_generation_error\": f\"something went wrong with the dashboard root result generation, {str(e)}\"})\n        print(\"----> Root results generation finished with error\")\n\n    # Adding root monitors\n    if evaluated_results.response.ok:\n        print(\"----> Generating heatmap\")\n        heatmap = dashboard_monitor_service.generate_heatmap_with_summary(monitors_array, evaluated_results.json)\n        dashboard_result.update({\"heatMap\": heatmap})\n        print(\"----> Heatmap generation finished\")\n    else:\n        print(f\"There was an error with the evaluation {evaluated_results.response}\")\n        dashboard_result.update(\n            {\"evaluation_error\": f\"There was an error with the evaluation {evaluated_results.response}\"})\n        print(\"----> Heatmap generation finished with error\")\n\n    yield dashboard_result\n\n\ndef execute_monitors(**kwargs) -> dict:\n    \"\"\"\n    Method that execute all monitors defined inside this Dashboard Model\n    \"\"\"\n    monitor_execution_results = {}\n\n    for monitor in kwargs[\"monitors_array\"]:\n        # If input does not contain raw value to be evaluated nor evaluated value, we execute monitor\n        try:\n            print(f\"--> Executing monitor {monitor.get_monitor_identifier()}\")\n            monitor.init(INIT_PARAM)\n            execution_result = monitor.execute_monitor(**kwargs)\n            monitor.set_execution_result(execution_result)\n            if monitor.is_evaluation_required():\n                monitor_execution_results.update(execution_result)\n            print(f\"--> Monitor {monitor.get_monitor_identifier()} executed successfully\")\n        except Exception as e:\n            print(\n                f\"Something wrong happened with {monitor.get_monitor_identifier()} , sending default execution values: \" + str(\n                    e))\n            if monitor.is_evaluation_required():\n                monitor_execution_results.update(monitor.get_default_values_for_evaluation())\n            monitor.set_execution_result(monitor.get_default_values_for_evaluation())\n            print(f\"--> Monitor {monitor.get_monitor_identifier()} executed with error\")\n\n    return monitor_execution_results\n\n# if __name__ == \"__main__\":\n#\n#     baseline_scored = pd.read_json('./sampleData/df_baseline_scored.json', lines=True)\n#     comparator_scored = pd.read_json('./sampleData/df_sample_scored.json', lines=True)\n#\n#     # Updated job, because input schema was all in UPPER CAPS\n#     jobAsString = open('./sampleData/jsonJobWithInputSchema_germanCredit_updated.json', 'r').read()\n#     json_job_dict = {\"rawJson\": jobAsString}\n#\n#     init(json_job_dict)\n#     metrics_result = metrics(baseline=baseline_scored, comparator=comparator_scored)\n#     for result in metrics_result:\n#         print(result)\n",
        "sourceCodeFilePath" : "main_dashboard_model.py",
        "sourceCodeType" : "MODEL",
        "initFunction" : "init",
        "metricsFunction" : "metrics"
      }, {
        "assetId" : "42e95a2f-eebc-3558-959a-78164f86cc4b",
        "name" : "custom_dashboard_monitors.py",
        "assetType" : "SOURCE_CODE",
        "assetRole" : "MODEL_SOURCE",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "primaryModelSource" : false,
        "sourceCode" : "from modelop_sdk.dashboard.base_dashboard_monitors import DefaultHeatmapDashboardMonitor\nimport modelop.monitors.stability as stability\nimport modelop.monitors.performance as performance\nimport modelop.schema.infer as infer\nimport modelop.monitors.bias as bias\nimport pandas as pd\n\n\n\nclass MOCStabilityMonitor(DefaultHeatmapDashboardMonitor):\n    \"\"\"\n    MOCStabilityMonitor\n    \"\"\"\n    JOB_JSON = {}\n\n    MONITORING_PARAMETERS = {}\n\n    def __init__(self, monitor_identifier: str = None, description: str = None,\n                 default_raw_values_for_eval: dict = None):\n        self.monitor_identifier = monitor_identifier\n        self.description = description\n        self.default_raw_values_for_eval = default_raw_values_for_eval\n\n    def init(self, job_json) -> dict:\n        print(f\"Init from {self.get_monitor_identifier()}\")\n        # Extract input schema from job JSON\n        input_schema_definition = infer.extract_input_schema(job_json)\n        # Get monitoring parameters from schema\n        global MONITORING_PARAMETERS\n        MONITORING_PARAMETERS = infer.set_monitoring_parameters(\n            schema_json=input_schema_definition, check_schema=True\n        )\n\n        print(\"predictors: %s\", MONITORING_PARAMETERS[\"predictors\"])\n        print(\"feature_dataclass: %s\", MONITORING_PARAMETERS[\"feature_dataclass\"])\n        print(\"special_values: %s\", MONITORING_PARAMETERS[\"special_values\"])\n        print(\"score_column: %s\", MONITORING_PARAMETERS[\"score_column\"])\n        print(\"label_column: %s\", MONITORING_PARAMETERS[\"label_column\"])\n        print(\"weight_column: %s\", MONITORING_PARAMETERS[\"weight_column\"])\n        print(\n            \"protected_classes: %s\", str(MONITORING_PARAMETERS[\"protected_classes\"])\n        )\n\n    def get_monitor_identifier(self) -> str:\n        return self.monitor_identifier\n\n    def get_description(self) -> str:\n        return self.description\n\n    def is_heatmap_monitor(self) -> bool:\n        return True\n\n    def get_default_values_for_evaluation(self) -> dict:\n        return self.default_raw_values_for_eval\n\n    def execute_monitor(self, **kwargs) -> dict:\n\n        if kwargs.get(\"baseline\") is None:\n            raise ValueError(\"Required baseline input not found\")\n\n        baseline = kwargs.get(\"baseline\")\n\n        if kwargs.get(\"comparator\") is None:\n            raise ValueError(\"Required comparator input not found\")\n\n        comparator = kwargs.get(\"comparator\")\n\n        score_column = MONITORING_PARAMETERS[\"score_column\"]\n        predictors = MONITORING_PARAMETERS[\"predictors\"]\n\n        # Initialize StabilityMonitor\n        stability_monitor = stability.StabilityMonitor(\n            df_baseline=baseline,\n            df_sample=comparator,\n            predictors=predictors,\n            feature_dataclass=MONITORING_PARAMETERS[\"feature_dataclass\"],\n            special_values=MONITORING_PARAMETERS[\"special_values\"],\n            score_column=score_column,\n            label_column=MONITORING_PARAMETERS[\"label_column\"],\n            weight_column=MONITORING_PARAMETERS[\"weight_column\"],\n        )\n\n        # Set default n_groups for each predictor and score\n        n_groups = {}\n        for feature in MONITORING_PARAMETERS[\"numerical_columns\"] + [\n            MONITORING_PARAMETERS[\"score_column\"]\n        ]:\n            # If a feature has more than 1 unique value, set n_groups to 2; else set to 1\n            feature_has_distinct_values = int(\n                (min(baseline[feature]) != max(baseline[feature]))\n            )\n            n_groups[feature] = 1 + feature_has_distinct_values\n\n        # Compute stability metrics\n        stability_metrics = stability_monitor.compute_stability_indices(\n            n_groups=n_groups, group_cuts={}\n        )\n\n        # Generating one output for evaluation\n        raw_values_for_evaluation = {\"stability_ks_credit_history\": stability_metrics[\"values\"][\"credit_history\"][\"stability_ks\"]}\n\n        return raw_values_for_evaluation\n\n\nclass MOCPerformanceMonitor(DefaultHeatmapDashboardMonitor):\n    \"\"\"\n    MOCPerformanceMonitor\n    \"\"\"\n    JOB_JSON = {}\n\n    MONITORING_PARAMETERS = {}\n\n    def __init__(self, monitor_identifier: str = None, description: str = None,\n                 default_raw_values_for_eval: dict = None):\n        self.monitor_identifier = monitor_identifier\n        self.description = description\n        self.default_raw_values_for_eval = default_raw_values_for_eval\n\n    def init(self, job_json) -> dict:\n        print(f\"Init from {self.get_monitor_identifier()}\")\n        # Extract input schema from job JSON\n        input_schema_definition = infer.extract_input_schema(job_json)\n        # Get monitoring parameters from schema\n        global MONITORING_PARAMETERS\n        MONITORING_PARAMETERS = infer.set_monitoring_parameters(\n            schema_json=input_schema_definition, check_schema=True\n        )\n\n        print(\"predictors: %s\", MONITORING_PARAMETERS[\"predictors\"])\n        print(\"feature_dataclass: %s\", MONITORING_PARAMETERS[\"feature_dataclass\"])\n        print(\"special_values: %s\", MONITORING_PARAMETERS[\"special_values\"])\n        print(\"score_column: %s\", MONITORING_PARAMETERS[\"score_column\"])\n        print(\"label_column: %s\", MONITORING_PARAMETERS[\"label_column\"])\n        print(\"weight_column: %s\", MONITORING_PARAMETERS[\"weight_column\"])\n        print(\n            \"protected_classes: %s\", str(MONITORING_PARAMETERS[\"protected_classes\"])\n        )\n\n    def get_monitor_identifier(self) -> str:\n        return self.monitor_identifier\n\n    def get_description(self) -> str:\n        return self.description\n\n    def is_heatmap_monitor(self) -> bool:\n        return True\n\n    def get_default_values_for_evaluation(self) -> dict:\n        return self.default_raw_values_for_eval\n\n    def execute_monitor(self, **kwargs) -> dict:\n        \"\"\"\n        Monitor result\n        {\n          \"test_name\": \"Classification Metrics\",\n          \"test_category\": \"performance\",\n          \"test_type\": \"classification_metrics\",\n          \"test_id\": \"performance_classification_metrics\",\n          \"values\": {\n            \"accuracy\": 0.665,\n            \"precision\": 0.4516,\n            \"recall\": 0.7241,\n            \"f1_score\": 0.5563, <--- value used for evaluation\n            \"auc\": 0.6825,\n            \"confusion_matrix\": [\n              {\n                \"0\": 0.455,\n                \"1\": 0.255\n              },\n              {\n                \"0\": 0.08,\n                \"1\": 0.21\n              }\n            ]\n          }\n        }\n        \"\"\"\n        if kwargs.get(\"comparator\") is None:\n            raise ValueError(\"Required comparator input not found\")\n\n        comparator = kwargs.get(\"comparator\")\n\n        # Initialize ModelEvaluator\n        model_evaluator = performance.ModelEvaluator(\n            dataframe=comparator,\n            score_column=MONITORING_PARAMETERS[\"score_column\"],\n            label_column=MONITORING_PARAMETERS[\"label_column\"],\n        )\n\n        # Compute classification metrics\n        classification_metrics = model_evaluator.evaluate_performance(\n            pre_defined_metrics=\"classification_metrics\"\n        )\n\n        # Generating one output for evaluation\n        raw_values_for_evaluation = {\"performance_f1_score\": classification_metrics[\"values\"][\"f1_score\"]}\n\n        return raw_values_for_evaluation\n\n\nclass MOCBiasMonitor(DefaultHeatmapDashboardMonitor):\n    \"\"\"\n    MOCBiasMonitor\n    \"\"\"\n    JOB_JSON = {}\n\n    MONITORING_PARAMETERS = {}\n\n    def __init__(self, monitor_identifier: str = None, description: str = None,\n                 default_raw_values_for_eval: dict = None):\n        self.monitor_identifier = monitor_identifier\n        self.description = description\n        self.default_raw_values_for_eval = default_raw_values_for_eval\n\n    def init(self, job_json) -> dict:\n        print(f\"Init from {self.get_monitor_identifier()}\")\n        # Extract input schema from job JSON\n        input_schema_definition = infer.extract_input_schema(job_json)\n        # Get monitoring parameters from schema\n        global MONITORING_PARAMETERS\n        MONITORING_PARAMETERS = infer.set_monitoring_parameters(\n            schema_json=input_schema_definition, check_schema=True\n        )\n\n        print(\"predictors: %s\", MONITORING_PARAMETERS[\"predictors\"])\n        print(\"feature_dataclass: %s\", MONITORING_PARAMETERS[\"feature_dataclass\"])\n        print(\"special_values: %s\", MONITORING_PARAMETERS[\"special_values\"])\n        print(\"score_column: %s\", MONITORING_PARAMETERS[\"score_column\"])\n        print(\"label_column: %s\", MONITORING_PARAMETERS[\"label_column\"])\n        print(\"weight_column: %s\", MONITORING_PARAMETERS[\"weight_column\"])\n        print(\n            \"protected_classes: %s\", str(MONITORING_PARAMETERS[\"protected_classes\"])\n        )\n\n    def get_monitor_identifier(self) -> str:\n        return self.monitor_identifier\n\n    def get_description(self) -> str:\n        return self.description\n\n    def is_heatmap_monitor(self) -> bool:\n        return True\n\n    def get_default_values_for_evaluation(self) -> dict:\n        return self.default_raw_values_for_eval\n\n    def execute_monitor(self, **kwargs) -> dict:\n        if kwargs.get(\"comparator\") is None:\n            raise ValueError(\"Required comparator input not found\")\n\n        comparator = kwargs.get(\"comparator\")\n\n        for protected_class in MONITORING_PARAMETERS[\"protected_classes\"]:\n            # Initialize BiasMonitor\n            bias_monitor = bias.BiasMonitor(\n                dataframe=comparator,\n                score_column=MONITORING_PARAMETERS[\"score_column\"],\n                label_column=MONITORING_PARAMETERS[\"label_column\"],\n                protected_class=protected_class,\n                reference_group=None,\n            )\n\n            # Compute aequitas_bias (disparity) metrics\n            bias_metrics = bias_monitor.compute_bias_metrics(\n                pre_defined_test=\"aequitas_bias\", thresholds={\"min\": 0.8, \"max\": 1.25}\n            )\n\n            result = {}\n            result[\"bias\"] = []\n\n            # Add BiasMonitor Vanilla output\n            result[\"bias\"].append(bias_metrics)\n\n            # Top-level metrics\n            for group_dict in bias_metrics[\"values\"]:\n                result.update(\n                    {\n                        str(\n                            protected_class\n                            + \"_\"\n                            + group_dict[\"attribute_value\"]\n                            + \"_statistical_parity\"\n                        ): group_dict[\"ppr_disparity\"],\n                        str(\n                            protected_class\n                            + \"_\"\n                            + group_dict[\"attribute_value\"]\n                            + \"_impact_parity\"\n                        ): group_dict[\"pprev_disparity\"],\n                    }\n                )\n\n            # Compute aequitas_group (Group) metrics\n            group_metrics = bias_monitor.compute_group_metrics(\n                pre_defined_test=\"aequitas_group\",\n            )\n\n            # Add BiasMonitor Vanilla output\n            result[\"bias\"].append(group_metrics)\n\n            # Generating one output for evaluation\n            raw_values_for_evaluation = {\n                \"bias_gender_female_statistical_parity\": result[\"gender_female_statistical_parity\"],\n                \"bias_gender_male_statistical_parity\": result[\"gender_male_statistical_parity\"]}\n\n        return raw_values_for_evaluation\n\n\n\"\"\"\n------------\nMethods to override by end users.\n------------\n\"\"\"\n\n\ndef build_monitors(job_json) -> []:\n    \"\"\"\n    Method used to define monitors to be used inside the Dashboard model.\n    \"\"\"\n    monitors_array = []\n\n    moc_stability_monitor = MOCStabilityMonitor(monitor_identifier=\"Stability Monitor\", description=\"Stability monitor\",\n                                                default_raw_values_for_eval={\"stability_ks_credit_history\", -1})\n\n    performance_monitor = MOCPerformanceMonitor(monitor_identifier=\"Performance Monitor\",\n                                                description=\"Performance monitor\",\n                                                default_raw_values_for_eval={\"performance_f1_score\": -1})\n\n    moc_bias_monitor = MOCBiasMonitor(monitor_identifier=\"Bias Monitor\",\n                                      description=\"Bias monitor\", default_raw_values_for_eval={})\n\n    monitors_array.append(moc_stability_monitor)\n    monitors_array.append(performance_monitor)\n    monitors_array.append(moc_bias_monitor)\n\n    return monitors_array\n",
        "sourceCodeFilePath" : "custom_dashboard_monitors.py",
        "sourceCodeType" : "MODEL"
      }, {
        "assetId" : "755c1904-99be-4fd0-a7cf-0ad52faa948b",
        "name" : "3170a9c1-0c20-40d4-ba1b-c4475c8a0783/755c1904-99be-4fd0-a7cf-0ad52faa948b.gitignore",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "UNKNOWN",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "dcc1d61ea0ca0dedf6456f467d4c832743f68ea0144ec638a740ab231e3e4ee2"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/755c1904-99be-4fd0-a7cf-0ad52faa948b.gitignore",
        "filename" : ".gitignore",
        "fileFormat" : "UNKNOWN",
        "fileSize" : 278
      }, {
        "assetId" : "661d091e-c5f8-4faa-a82f-4cde590e2ca0",
        "name" : "3170a9c1-0c20-40d4-ba1b-c4475c8a0783/661d091e-c5f8-4faa-a82f-4cde590e2ca0.json",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "TEST_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "d23455d2f14209d8d72ce82a9ada7b9e6a8f2cdb2de075ef53f03c14ccb335c7"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/661d091e-c5f8-4faa-a82f-4cde590e2ca0.json",
        "filename" : "sampleData/df_sample_scored.json",
        "fileFormat" : "JSON",
        "fileSize" : 95686
      }, {
        "assetId" : "a107a6a0-f541-474e-ac71-fe747766a2b6",
        "name" : "3170a9c1-0c20-40d4-ba1b-c4475c8a0783/a107a6a0-f541-474e-ac71-fe747766a2b6.json",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "TEST_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "e170f8ca2360e82679d4633c35b2908f93a8b41bcd63d027cd500daa19da76d3"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/a107a6a0-f541-474e-ac71-fe747766a2b6.json",
        "filename" : "sampleData/df_baseline_scored.json",
        "fileFormat" : "JSON",
        "fileSize" : 382615
      }, {
        "assetId" : "6eecc134-40a5-4583-80af-dc225d6a3fb1",
        "name" : "3170a9c1-0c20-40d4-ba1b-c4475c8a0783/6eecc134-40a5-4583-80af-dc225d6a3fb1.json",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "TEST_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "3efbdd5726a5e85f40012e918563b4887fbba37f65e4a15f318ef137a6d8a976"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/6eecc134-40a5-4583-80af-dc225d6a3fb1.json",
        "filename" : "sampleData/jsonJobWithInputSchema_germanCredit_updated.json",
        "fileFormat" : "JSON",
        "fileSize" : 190089
      }, {
        "assetId" : "df0834bf-e495-4fbb-8fa3-77111e9f773d",
        "name" : "3170a9c1-0c20-40d4-ba1b-c4475c8a0783/df0834bf-e495-4fbb-8fa3-77111e9f773d.json",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "TEST_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "534bd755760f29145b37462b6b2821709818b56b7c717755c21c2a1003763117"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/df0834bf-e495-4fbb-8fa3-77111e9f773d.json",
        "filename" : "sampleData/df_baseline.json",
        "fileFormat" : "JSON",
        "fileSize" : 374615
      }, {
        "assetId" : "4e6bceec-83de-4b38-bc04-f3f34b7bb320",
        "name" : "3170a9c1-0c20-40d4-ba1b-c4475c8a0783/4e6bceec-83de-4b38-bc04-f3f34b7bb320.json",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "TEST_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "b93be8413e3590dc096a43a8ebce9dfbef1f7629b6705cdcb4ff258beb92bb0e"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/4e6bceec-83de-4b38-bc04-f3f34b7bb320.json",
        "filename" : "sampleData/df_sample.json",
        "fileFormat" : "JSON",
        "fileSize" : 93686
      }, {
        "assetId" : "1716eb31-0964-4b06-9f7c-97e4d122071e",
        "assetType" : "FILE",
        "assetRole" : "README_FILE",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "filename" : "README.md",
        "fileFormat" : "UNKNOWN",
        "localFile" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/README.md",
        "fileSize" : 23,
        "fileContentString" : "# demo_dashboard_models",
        "fileContent" : "IyBkZW1vX2Rhc2hib2FyZF9tb2RlbHM="
      }, {
        "assetId" : "be79a32a-62b6-4e4f-a8e9-d6216523d629",
        "name" : "metadata.json",
        "assetType" : "FILE",
        "assetRole" : "MODEL_METADATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "filename" : "metadata.json",
        "fileFormat" : "JSON",
        "localFile" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/metadata.json",
        "fileSize" : 357,
        "fileContentString" : "{\n    \"tags\": [],\n    \"name\": \"Default Dashboard Model\",\n    \"description\": \"Runs default monitors on a base business model generating data for the main MOC Dashboard\",\n    \"modelCategory\": \"MODEL_MONITORING_MODEL\",\n    \"defaultAssociationRole\": \"METRICS_MODEL\",\n    \"frequentlyUsed\": true,\n    \"custom\": {\n        \"modelopPackageVersion\": \"0.13.0\"\n    }\n}\n",
        "fileContent" : "ewogICAgInRhZ3MiOiBbXSwKICAgICJuYW1lIjogIkRlZmF1bHQgRGFzaGJvYXJkIE1vZGVsIiwKICAgICJkZXNjcmlwdGlvbiI6ICJSdW5zIGRlZmF1bHQgbW9uaXRvcnMgb24gYSBiYXNlIGJ1c2luZXNzIG1vZGVsIGdlbmVyYXRpbmcgZGF0YSBmb3IgdGhlIG1haW4gTU9DIERhc2hib2FyZCIsCiAgICAibW9kZWxDYXRlZ29yeSI6ICJNT0RFTF9NT05JVE9SSU5HX01PREVMIiwKICAgICJkZWZhdWx0QXNzb2NpYXRpb25Sb2xlIjogIk1FVFJJQ1NfTU9ERUwiLAogICAgImZyZXF1ZW50bHlVc2VkIjogdHJ1ZSwKICAgICJjdXN0b20iOiB7CiAgICAgICAgIm1vZGVsb3BQYWNrYWdlVmVyc2lvbiI6ICIwLjEzLjAiCiAgICB9Cn0K"
      }, {
        "assetId" : "97fabc1d-11fa-415e-8691-ec197d4500ab",
        "name" : "required_assets.json",
        "assetType" : "FILE",
        "assetRole" : "REQUIRED_ASSETS",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783",
          "repositoryRemote" : "https://github.com/modelop/default_dashboard_model",
          "repositoryBranch" : "master",
          "lastCommitId" : "929334e2cf0da9a01c0708008de0ecca22d63c26",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:34:21.829Z: https://github.com/modelop/default_dashboard_model successfully updated",
          "lastCommitDate" : "2022-03-03T05:45:10Z"
        },
        "filename" : "required_assets.json",
        "fileFormat" : "JSON",
        "localFile" : "/tmp/model-manage-repos/master/3170a9c1-0c20-40d4-ba1b-c4475c8a0783/required_assets.json",
        "fileSize" : 345,
        "fileContentString" : "[\n    {\n        \"usage\": \"INPUT_ASSET\",\n        \"assetRole\": \"BASELINE_DATA\",\n        \"metaData\": {\n            \"description\": \"Baseline/Reference Dataset\"\n        }\n    },\n    {\n        \"usage\": \"INPUT_ASSET\",\n        \"assetRole\": \"COMPARATOR_DATA\",\n        \"metaData\": {\n            \"description\": \"Slice of Production Data\"\n        }\n    }\n]\n",
        "fileContent" : "WwogICAgewogICAgICAgICJ1c2FnZSI6ICJJTlBVVF9BU1NFVCIsCiAgICAgICAgImFzc2V0Um9sZSI6ICJCQVNFTElORV9EQVRBIiwKICAgICAgICAibWV0YURhdGEiOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJCYXNlbGluZS9SZWZlcmVuY2UgRGF0YXNldCIKICAgICAgICB9CiAgICB9LAogICAgewogICAgICAgICJ1c2FnZSI6ICJJTlBVVF9BU1NFVCIsCiAgICAgICAgImFzc2V0Um9sZSI6ICJDT01QQVJBVE9SX0RBVEEiLAogICAgICAgICJtZXRhRGF0YSI6IHsKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNsaWNlIG9mIFByb2R1Y3Rpb24gRGF0YSIKICAgICAgICB9CiAgICB9Cl0K"
      } ],
      "gitDifferences" : [ ],
      "associatedModels" : [ ],
      "requiredAssets" : [ {
        "assetId" : "5233c4b6-5991-4837-8a52-c4a028f85d58",
        "assetType" : "FILE",
        "assetRole" : "BASELINE_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ],
          "description" : "Baseline/Reference Dataset"
        },
        "usage" : "INPUT_ASSET",
        "fileSize" : 0
      }, {
        "assetId" : "b57c24ff-5506-464d-b4ca-5d3f3254ceb3",
        "assetType" : "FILE",
        "assetRole" : "COMPARATOR_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ],
          "description" : "Slice of Production Data"
        },
        "usage" : "INPUT_ASSET",
        "fileSize" : 0
      } ]
    },
    "modelMLCs" : [ {
      "processInstance" : {
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "processDefinitionName" : "Dashboard Process",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionVersion" : 4,
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:25.185+00:00",
        "endTime" : "2022-03-03T06:35:44.000+00:00",
        "durationInMillis" : 19182,
        "startActivityId" : "StartEvent_1",
        "state" : "COMPLETED"
      },
      "activityInstances" : [ {
        "parentActivityInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_1h9j47y#multiInstanceBody",
        "activityType" : "multiInstanceBody",
        "startTime" : "2022-03-03T06:35:25.832+00:00",
        "canceled" : false,
        "completeScope" : false
      }, {
        "parentActivityInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_0bezxmu",
        "activityName" : "Get Deployable Model Ids",
        "activityType" : "scriptTask",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "processInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "executionId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:25.410+00:00",
        "endTime" : "2022-03-03T06:35:25.482+00:00",
        "durationInMillis" : 72,
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_0sqc2gv",
        "activityName" : "Get Deployed Models",
        "activityType" : "serviceTask",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "processInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "executionId" : "1bc977a4-9abc-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:25.236+00:00",
        "endTime" : "2022-03-03T06:35:25.328+00:00",
        "durationInMillis" : 92,
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "Activity_1h9j47y:1c246900-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_15g5umr",
        "activityName" : "Run Standardized Tests",
        "activityType" : "serviceTask",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "processInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "executionId" : "1c4f97bb-9abc-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:26.115+00:00",
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "Activity_1h9j47y:1c246900-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_17gli15",
        "activityName" : "Get Base Model Required Assets",
        "activityType" : "serviceTask",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "processInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "executionId" : "1c3cfa12-9abc-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:26.001+00:00",
        "endTime" : "2022-03-03T06:35:26.092+00:00",
        "durationInMillis" : 91,
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_17zgp7q",
        "activityName" : "Get Latest Dashboard Snapshot",
        "activityType" : "serviceTask",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "processInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "executionId" : "1bf47f4f-9abc-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:25.518+00:00",
        "endTime" : "2022-03-03T06:35:25.627+00:00",
        "durationInMillis" : 109,
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "1c2468f8-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_1h9j47y",
        "activityType" : "subProcess",
        "startTime" : "2022-03-03T06:35:25.832+00:00",
        "endTime" : "2022-03-03T06:35:43.867+00:00",
        "durationInMillis" : 18035,
        "canceled" : false,
        "completeScope" : true
      }, {
        "parentActivityInstanceId" : "Activity_1h9j47y:1c246900-9abc-11ec-be8e-427774fea553",
        "activityId" : "Event_0r3x6ne",
        "activityType" : "startEvent",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "processInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "executionId" : "1c2468ff-9abc-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:25.892+00:00",
        "endTime" : "2022-03-03T06:35:25.939+00:00",
        "durationInMillis" : 47,
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "activityId" : "Gateway_0xq5n8p",
        "activityType" : "exclusiveGateway",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "processInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "executionId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:25.345+00:00",
        "endTime" : "2022-03-03T06:35:25.397+00:00",
        "durationInMillis" : 52,
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "activityId" : "Gateway_1e3vip3",
        "activityName" : "Dashboard model found?",
        "activityType" : "exclusiveGateway",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "processInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "executionId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:25.701+00:00",
        "endTime" : "2022-03-03T06:35:25.804+00:00",
        "durationInMillis" : 103,
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "activityId" : "StartEvent_1",
        "activityType" : "signalStartEvent",
        "processDefinitionKey" : "Process_12vz7p6",
        "processDefinitionId" : "Process_12vz7p6:4:6345fe79-9a08-11ec-be8e-427774fea553",
        "processInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "executionId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:35:25.186+00:00",
        "endTime" : "2022-03-03T06:35:25.216+00:00",
        "durationInMillis" : 30,
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "Activity_1h9j47y:1c246900-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_15g5umr",
        "activityName" : "Run Standardized Tests",
        "activityType" : "serviceTask",
        "canceled" : true,
        "completeScope" : false
      }, {
        "parentActivityInstanceId" : "Activity_1h9j47y:1c246900-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_0as824b",
        "activityName" : "Exception Handler",
        "activityType" : "subProcess",
        "startTime" : "2022-03-03T06:35:42.576+00:00",
        "endTime" : "2022-03-03T06:35:43.778+00:00",
        "durationInMillis" : 1202,
        "canceled" : false,
        "completeScope" : true
      }, {
        "parentActivityInstanceId" : "Activity_0as824b:2617dd50-9abc-11ec-be8e-427774fea553",
        "activityId" : "Event_1xhmy7j",
        "activityType" : "errorStartEvent",
        "startTime" : "2022-03-03T06:35:42.601+00:00",
        "endTime" : "2022-03-03T06:35:42.688+00:00",
        "durationInMillis" : 87,
        "canceled" : false,
        "completeScope" : false
      }, {
        "parentActivityInstanceId" : "Activity_0as824b:2617dd50-9abc-11ec-be8e-427774fea553",
        "activityId" : "Activity_08rj0fv",
        "activityName" : "Notify Error",
        "activityType" : "serviceTask",
        "startTime" : "2022-03-03T06:35:43.079+00:00",
        "endTime" : "2022-03-03T06:35:43.386+00:00",
        "durationInMillis" : 307,
        "canceled" : false,
        "completeScope" : false
      }, {
        "parentActivityInstanceId" : "Activity_0as824b:2617dd50-9abc-11ec-be8e-427774fea553",
        "activityId" : "Event_1fzs9sf",
        "activityType" : "noneEndEvent",
        "startTime" : "2022-03-03T06:35:43.584+00:00",
        "endTime" : "2022-03-03T06:35:43.685+00:00",
        "durationInMillis" : 101,
        "canceled" : false,
        "completeScope" : true
      }, {
        "parentActivityInstanceId" : "1bc1af70-9abc-11ec-be8e-427774fea553",
        "activityId" : "Event_13kkluo",
        "activityType" : "terminateEndEvent",
        "startTime" : "2022-03-03T06:35:43.990+00:00",
        "endTime" : "2022-03-03T06:35:44.081+00:00",
        "durationInMillis" : 91,
        "canceled" : false,
        "completeScope" : true
      } ]
    } ],
    "metaData" : {
      "custom" : { },
      "tags" : [ "INIT" ],
      "name" : "Default Dashboard Model-20220302_2334"
    },
    "associatedModels" : [ ],
    "modelDocuments" : [ ],
    "targetRuntimes" : [ {
      "engineType" : "MODEL_OP_ENGINE",
      "inputEndpoints" : [ ],
      "outputEndpoints" : [ ],
      "tags" : [ ],
      "inProduction" : false,
      "lastActivity" : { }
    } ]
  },
  "targetEngine" : {
    "id" : "261ca280-b29a-5728-9b8e-fea16b77541f",
    "group" : "modelop",
    "version" : 1088,
    "createdDate" : "2022-02-15T22:01:26.702Z",
    "lastModifiedDate" : "2022-03-03T06:35:43.386Z",
    "createdBy" : "SYSTEM",
    "lastModifiedBy" : "SYSTEM",
    "engineType" : "MODEL_OP_ENGINE",
    "name" : "engine-test",
    "release" : "2.5.2+build.1760.reff72273a",
    "state" : "INIT",
    "platform" : {"r":{"system":{"version_info":{"year":"2017","version.string":"R version 3.4.3 (2017-11-30)","system":"x86_64, linux-gnu","svn rev":"73796","status":"","platform":"x86_64-pc-linux-gnu","os":"linux-gnu","nickname":"Kite-Eating Tree","month":"11","minor":"4.3","major":"3","language":"R","day":"30","arch":"x86_64"},"version":"R version 3.4.3 (2017-11-30)","system":"unix","processor":{"arch":"x86_64"},"platform":"unix","num_processors":2,"executable":"/usr/bin/R","double_info":["0.0000000000000002220446","0.0000000000000001110223","2.225074e-308","1.797693e+308","2","53","5","0","-52","-53","11","-1022","1024","2147483647","8","8","16","8"],"architecture":64},"libraries":{"RevoMods":"11.0.0","lattice":"0.20-35","mrsdeploy":"1.1.3","RUnit":"0.4.26","Matrix":"1.2-12","methods":"3.4.3","cluster":"2.0.6","tcltk":"3.4.3","png":"0.1-7","fastscore.io":"1.0","base":"3.4.3","iterators":"1.0.9","CompatibilityAPI":"1.1.0","MASS":"7.3-47","nnet":"7.3-12","grDevices":"3.4.3","utils":"3.4.3","RevoIOQ":"8.0.9","deployrRserve":"9.0.0","R6":"2.2.2","codetools":"0.2-15","splines":"3.4.3","class":"7.3-14","boot":"1.3-20","jsonlite":"1.5","spatial":"7.3-11","RevoPemaR":"10.0.0","RevoScaleR":"9.3.0","foreign":"0.8-69","RevoTreeView":"10.0.0","fastscore.runner":"1.6","compiler":"3.4.3","nlme":"3.1-131","RevoUtils":"10.0.7","curl":"3.1","survival":"2.41-3","datasets":"3.4.3","foreach":"1.4.5","MicrosoftR":"3.4.3.0097","mgcv":"1.8-22","grid":"3.4.3","KernSmooth":"2.23-15","doRSR":"10.0.0","doParallel":"1.0.12","RevoUtilsMath":"10.0.1","stats":"3.4.3","stats4":"3.4.3","graphics":"3.4.3","rpart":"4.1-11","parallel":"3.4.3","RevoTDUtils":"1.0","tools":"3.4.3","mrupdate":"1.0.1","checkpoint":"0.4.3","fastscore":"1.6"}},"python":{"system":{"version_info":[3,6,8,"final",0],"version":"3.6.8 (default, Nov  2 2021, 13:01:57) \n[GCC 8.4.1 20200928 (Red Hat 8.4.1-1)]","system":"Linux","processor":"x86_64","platform":"linux","num_processors":2,"float_info":[1.7976931348623157E308,1024,308,2.2250738585072014E-308,-1021,-307,15,53,2.220446049250313E-16,2,1],"executable":"/usr/bin/python3","architecture":["64bit",""],"api_version":1013},"libraries":{"Werkzeug":"2.0.3","shap":"0.35.0","modelop":"0.13.0","tensorflow":"1.8.0","Pillow":"8.4.0","gast":"0.5.3","gpg":"1.13.1","dataclasses":"0.8","requests":"2.26.0","absl-py":"1.0.0","grpcio":"1.43.0","MarkupSafe":"2.0.1","zipp":"3.6.0","joblib":"1.1.0","protobuf":"3.19.4","PyPDF2":"1.26.0","aequitas":"0.42.0","SQLAlchemy":"1.4.31","greenlet":"1.1.2","pip":"21.0.1","tabulate":"0.8.2","wheel":"0.37.1","visitor":"0.1.3","gensim":"3.8.3","scipy":"1.5.4","millify":"0.1.1","nltk":"3.5","setuptools":"54.0.0","typing-extensions":"4.1.1","httplib2":"0.20.4","smart-open":"5.2.1","patsy":"0.5.2","numpy":"1.19.5","markdown2":"2.3.5","cached-property":"1.5.2","pyparsing":"3.0.7","fasttext":"0.9.2","pytz":"2021.3","PyYAML":"6.0","astor":"0.8.1","python-dateutil":"2.8.2","Flask-Bootstrap":"3.3.7.1","scikit-learn":"0.22","quickavro":"0.1.22","bert":"2.2.0","ohio":"0.5.0","pyrsistent":"0.18.0","webencodings":"0.5.1","bleach":"1.5.0","Flask":"0.12.2","toolz":"0.11.2","urllib3":"1.26.7","termcolor":"1.1.0","pybind11":"2.9.1","statsmodels":"0.12.2","reportlab":"3.6.6","basho-erlastic":"2.1.1","tensorboard":"1.8.0","itsdangerous":"2.0.1","six":"1.16.0","pandas":"1.1.5","charset-normalizer":"2.0.7","kiwisolver":"1.3.1","xgboost":"1.3.3","dominate":"2.6.0","click":"8.0.3","seaborn":"0.11.2","cycler":"0.11.0","idna":"3.3","regex":"2022.1.18","jsonschema":"4.0.0","h5py":"3.1.0","Jinja2":"3.0.3","importlib-metadata":"4.8.3","attrs":"21.4.0","tqdm":"4.62.3","html5lib":"1.1","certifi":"2021.10.8","torch":"1.7.1","entrypoints":"0.4","rpm":"4.14.3","altair":"4.1.0","xhtml2pdf":"0.2.2","matplotlib":"3.3.4","msgpack":"1.0.2","Markdown":"3.3.6"}}},
    "inputEndpoints" : [ {
      "endpointType" : "FILE",
      "encoding" : "JSON",
      "path" : "/tmp/playground/batch-e014cee4-03fc-4be6-b86d-4bcc6530bcd2/EmptyAssetFile"
    }, {
      "endpointType" : "FILE",
      "encoding" : "JSON",
      "path" : "/tmp/playground/batch-e014cee4-03fc-4be6-b86d-4bcc6530bcd2/EmptyAssetFile"
    } ],
    "outputEndpoints" : [ {
      "endpointType" : "FILE",
      "encoding" : "JSON",
      "path" : "/tmp/playground/batch-e014cee4-03fc-4be6-b86d-4bcc6530bcd2/test_result.json"
    } ],
    "tags" : [ "MYSQL", "SQL_SERVER", "SNOWFLAKE", "DB2", "CENTOS8", "PY36", "DS", "test", "DEBUG_TRUE", "RETAIN_FALSE", "default" ],
    "environmentName" : "unassigned",
    "inProduction" : false,
    "lastActivity" : {
      "date" : "2022-03-03T06:35:28.770Z",
      "type" : "JOB"
    },
    "manifoldInfo" : {
      "streams" : [ ],
      "jets" : [ ],
      "state" : "init",
      "group" : "modelop",
      "initialTags" : [ "MYSQL", "SQL_SERVER", "SNOWFLAKE", "DB2", "CENTOS8", "PY36", "DS", "test", "DEBUG_TRUE", "RETAIN_FALSE" ],
      "environmentName" : "unassigned",
      "inProduction" : false
    }
  },
  "referenceModel" : {
    "id" : "9783b96e-b6d8-4e25-8ac2-b6473e7b26dd",
    "group" : "modelop",
    "version" : 12,
    "createdDate" : "2022-03-03T06:48:48.580Z",
    "lastModifiedDate" : "2022-03-03T06:49:11.369Z",
    "createdBy" : "Admin",
    "lastModifiedBy" : "SYSTEM",
    "storedModel" : {
      "id" : "1d9a7d1e-132c-4eba-9ae9-73d087420060",
      "group" : "modelop",
      "version" : 539,
      "createdDate" : "2022-02-24T03:52:22.723Z",
      "lastModifiedDate" : "2022-03-03T06:39:09.283Z",
      "createdBy" : "Admin",
      "lastModifiedBy" : "SYSTEM",
      "modelMetaData" : {
        "custom" : { },
        "tags" : [ "batch_prod" ],
        "name" : "german_credit_python",
        "description" : "Imported from a GIT repository",
        "type" : "PYTHON",
        "inputSchema" : [ {
          "schemaId" : "7ed3d856-7d9d-4799-b036-33adf6bff991",
          "name" : "input_schema.avsc",
          "schemaDefinition" : {"type":"record","name":"input_schema.avsc","fields":[{"type":"int","specialValues":[],"scoringOptional":false,"role":"identifier","protectedClass":false,"name":"id","driftCandidate":false,"dataClass":"numerical"},{"type":"int","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"duration_months","driftCandidate":true,"dataClass":"numerical"},{"type":"float","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"credit_amount","driftCandidate":true,"dataClass":"numerical"},{"type":"int","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"installment_rate","driftCandidate":true,"dataClass":"numerical"},{"type":"int","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"present_residence_since","driftCandidate":true,"dataClass":"numerical"},{"type":"int","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"age_years","driftCandidate":true,"dataClass":"numerical"},{"type":"int","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"number_existing_credits","driftCandidate":true,"dataClass":"numerical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"checking_status","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"credit_history","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"purpose","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"savings_account","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"present_employment_since","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"debtors_guarantors","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"property","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"installment_plans","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"housing","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"job","driftCandidate":true,"dataClass":"categorical"},{"type":"int","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"number_people_liable","driftCandidate":true,"dataClass":"numerical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"telephone","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"foreign_worker","driftCandidate":true,"dataClass":"categorical"},{"type":"string","specialValues":[],"scoringOptional":true,"role":"predictor","protectedClass":true,"name":"gender","driftCandidate":true,"dataClass":"categorical"},{"type":"int","specialValues":[],"scoringOptional":true,"role":"label","protectedClass":false,"name":"label_value","driftCandidate":true,"dataClass":"categorical"},{"type":"int","specialValues":[],"scoringOptional":true,"role":"score","protectedClass":false,"name":"score","driftCandidate":true,"dataClass":"categorical"}]}
        }, {
          "schemaId" : "685f6b47-2037-422f-97d0-a1e217a2dfb0",
          "name" : "input_schema.avsc",
          "schemaDefinition" : {"type":"record","name":"inferred_schema","fields":[{"type":"string","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"a","driftCandidate":true,"dataClass":"categorical"}]}
        }, {
          "schemaId" : "7be77562-e75d-48aa-b998-7747ec3ba2b6",
          "name" : "input_schema.avsc",
          "schemaDefinition" : {"type":"record","name":"inferred_schema","fields":[{"type":"int","specialValues":[],"scoringOptional":false,"role":"predictor","protectedClass":false,"name":"foo","driftCandidate":true,"dataClass":"numerical"}]}
        } ],
        "outputSchema" : [ {
          "schemaId" : "57c472d6-5560-4343-8f17-251e69bb720f",
          "name" : "output_schema.avsc",
          "schemaDefinition" : {"type":"array","items":{"type":"record","name":"output_schema.avsc","fields":[{"type":"int","name":"id"},{"type":"int","name":"number_people_liable"},{"type":"int","name":"age_years"},{"type":"string","name":"present_employment_since"},{"type":"string","name":"job"},{"type":"string","name":"housing"},{"type":"string","name":"telephone"},{"type":"string","name":"installment_plans"},{"type":"int","name":"number_existing_credits"},{"type":"string","name":"credit_history"},{"type":"string","name":"foreign_worker"},{"type":"string","name":"property"},{"type":"int","name":"installment_rate"},{"type":"string","name":"purpose"},{"type":"string","name":"checking_status"},{"type":"int","name":"present_residence_since"},{"type":"string","name":"debtors_guarantors"},{"type":"string","name":"savings_account"},{"type":"int","name":"duration_months"},{"type":"int","name":"credit_amount"},{"type":"string","name":"gender"},{"type":"int","name":"label_value"},{"type":"int","name":"score"}]}}
        } ],
        "enableInputSchemaChecking" : false,
        "enableOutputSchemaChecking" : false,
        "attachments" : [ ],
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "modelCategory" : "BUSINESS_MODEL",
        "modelUseCategory" : "unassigned",
        "modelOrganization" : "company",
        "modelRisk" : "unassigned"
      },
      "modelAssets" : [ {
        "assetId" : "ab910e92-301f-3a62-ab41-227f7d53ae35",
        "name" : "logistic_regression_model_trainer.ipynb",
        "assetType" : "SOURCE_CODE",
        "assetRole" : "MODEL_SOURCE",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "primaryModelSource" : false,
        "sourceCode" : "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# From Notebook to ModelOp Center:\\n\",\n    \"## Training, Evaluating, and Conforming a Model for Deployment\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"In this notebook, we demonstrate the process of \\n\",\n    \"1. training a model, \\n\",\n    \"2. evaluating its performance, \\n\",\n    \"3. saving it for later use,\\n\",\n    \"4. and conforming it to MOC standards.\\n\",\n    \"\\n\",\n    \"More specifically, we will train a logistic regression classifier on the German Credit Data dataset.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**I - Model Training**\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let's begin by loading relevant libraries. We will need `sklearn` for model training, and `aequitas` for bias detection.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import csv\\n\",\n    \"import json\\n\",\n    \"import pickle\\n\",\n    \"import numpy as np\\n\",\n    \"import pandas as pd\\n\",\n    \"\\n\",\n    \"from aequitas.bias import Bias\\n\",\n    \"from aequitas.group import Group\\n\",\n    \"from aequitas.preprocessing import preprocess_input_df\\n\",\n    \"\\n\",\n    \"from sklearn import set_config\\n\",\n    \"from sklearn.pipeline import make_pipeline\\n\",\n    \"from sklearn.preprocessing import OneHotEncoder\\n\",\n    \"from sklearn.linear_model import LogisticRegression\\n\",\n    \"from sklearn.model_selection import train_test_split, GridSearchCV, RepeatedStratifiedKFold\\n\",\n    \"from sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score, \\\\\\n\",\n    \"                            f1_score, fbeta_score, confusion_matrix\\n\",\n    \"\\n\",\n    \"# set_config(display='diagram')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The **German Credit Data** dataset can be found here: https://archive.ics.uci.edu/ml/datasets/statlog+(german+credit+data). Download it and load it from a *CSV* file. For our purposes, the dataset has been modified slightly to include an `id` column, and a `gender` column (engineered from `status_sex`, used to demonstarte bias). The target variable is under `label`. We have mapped the labels `[1,2]` to `[0,1]`, where `1` indicates the positive class (loan default).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"data = pd.read_csv(\\\"german_credit_data.csv\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The aequitas library requires the true label to be encoded as 'label_value', so let us rename that column.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"data = data.rename(columns={\\\"label\\\":\\\"label_value\\\"})\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array(['id', 'duration_months', 'credit_amount', 'installment_rate',\\n\",\n       \"       'present_residence_since', 'age_years', 'number_existing_credits',\\n\",\n       \"       'checking_status', 'credit_history', 'purpose', 'savings_account',\\n\",\n       \"       'present_employment_since', 'debtors_guarantors', 'property',\\n\",\n       \"       'installment_plans', 'housing', 'job', 'number_people_liable',\\n\",\n       \"       'telephone', 'foreign_worker', 'gender', 'label_value'],\\n\",\n       \"      dtype=object)\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"data.columns.values\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let's look at some data:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>id</th>\\n\",\n       \"      <th>duration_months</th>\\n\",\n       \"      <th>credit_amount</th>\\n\",\n       \"      <th>installment_rate</th>\\n\",\n       \"      <th>present_residence_since</th>\\n\",\n       \"      <th>age_years</th>\\n\",\n       \"      <th>number_existing_credits</th>\\n\",\n       \"      <th>checking_status</th>\\n\",\n       \"      <th>credit_history</th>\\n\",\n       \"      <th>purpose</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>debtors_guarantors</th>\\n\",\n       \"      <th>property</th>\\n\",\n       \"      <th>installment_plans</th>\\n\",\n       \"      <th>housing</th>\\n\",\n       \"      <th>job</th>\\n\",\n       \"      <th>number_people_liable</th>\\n\",\n       \"      <th>telephone</th>\\n\",\n       \"      <th>foreign_worker</th>\\n\",\n       \"      <th>gender</th>\\n\",\n       \"      <th>label_value</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>6</td>\\n\",\n       \"      <td>1169</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>67</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>A11</td>\\n\",\n       \"      <td>A34</td>\\n\",\n       \"      <td>A43</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>A101</td>\\n\",\n       \"      <td>A121</td>\\n\",\n       \"      <td>A143</td>\\n\",\n       \"      <td>A152</td>\\n\",\n       \"      <td>A173</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>A192</td>\\n\",\n       \"      <td>A201</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>48</td>\\n\",\n       \"      <td>5951</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>22</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>A12</td>\\n\",\n       \"      <td>A32</td>\\n\",\n       \"      <td>A43</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>A101</td>\\n\",\n       \"      <td>A121</td>\\n\",\n       \"      <td>A143</td>\\n\",\n       \"      <td>A152</td>\\n\",\n       \"      <td>A173</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>A191</td>\\n\",\n       \"      <td>A201</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>12</td>\\n\",\n       \"      <td>2096</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>49</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>A14</td>\\n\",\n       \"      <td>A34</td>\\n\",\n       \"      <td>A46</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>A101</td>\\n\",\n       \"      <td>A121</td>\\n\",\n       \"      <td>A143</td>\\n\",\n       \"      <td>A152</td>\\n\",\n       \"      <td>A172</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>A191</td>\\n\",\n       \"      <td>A201</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>42</td>\\n\",\n       \"      <td>7882</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>45</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>A11</td>\\n\",\n       \"      <td>A32</td>\\n\",\n       \"      <td>A42</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>A103</td>\\n\",\n       \"      <td>A122</td>\\n\",\n       \"      <td>A143</td>\\n\",\n       \"      <td>A153</td>\\n\",\n       \"      <td>A173</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>A191</td>\\n\",\n       \"      <td>A201</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>24</td>\\n\",\n       \"      <td>4870</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>53</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>A11</td>\\n\",\n       \"      <td>A33</td>\\n\",\n       \"      <td>A40</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>A101</td>\\n\",\n       \"      <td>A124</td>\\n\",\n       \"      <td>A143</td>\\n\",\n       \"      <td>A153</td>\\n\",\n       \"      <td>A173</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>A191</td>\\n\",\n       \"      <td>A201</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>5 rows × 22 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   id  duration_months  credit_amount  installment_rate  \\\\\\n\",\n       \"0   0                6           1169                 4   \\n\",\n       \"1   1               48           5951                 2   \\n\",\n       \"2   2               12           2096                 2   \\n\",\n       \"3   3               42           7882                 2   \\n\",\n       \"4   4               24           4870                 3   \\n\",\n       \"\\n\",\n       \"   present_residence_since  age_years  number_existing_credits  \\\\\\n\",\n       \"0                        4         67                        2   \\n\",\n       \"1                        2         22                        1   \\n\",\n       \"2                        3         49                        1   \\n\",\n       \"3                        4         45                        1   \\n\",\n       \"4                        4         53                        2   \\n\",\n       \"\\n\",\n       \"  checking_status credit_history purpose  ... debtors_guarantors property  \\\\\\n\",\n       \"0             A11            A34     A43  ...               A101     A121   \\n\",\n       \"1             A12            A32     A43  ...               A101     A121   \\n\",\n       \"2             A14            A34     A46  ...               A101     A121   \\n\",\n       \"3             A11            A32     A42  ...               A103     A122   \\n\",\n       \"4             A11            A33     A40  ...               A101     A124   \\n\",\n       \"\\n\",\n       \"  installment_plans housing   job number_people_liable telephone  \\\\\\n\",\n       \"0              A143    A152  A173                    1      A192   \\n\",\n       \"1              A143    A152  A173                    1      A191   \\n\",\n       \"2              A143    A152  A172                    2      A191   \\n\",\n       \"3              A143    A153  A173                    2      A191   \\n\",\n       \"4              A143    A153  A173                    2      A191   \\n\",\n       \"\\n\",\n       \"   foreign_worker  gender label_value  \\n\",\n       \"0            A201    male           0  \\n\",\n       \"1            A201  female           1  \\n\",\n       \"2            A201    male           0  \\n\",\n       \"3            A201    male           0  \\n\",\n       \"4            A201    male           1  \\n\",\n       \"\\n\",\n       \"[5 rows x 22 columns]\"\n      ]\n     },\n     \"execution_count\": 6,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"data.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Not all numeric columns need to be considered as numeric features. For example, `number_people_liable` only has two unique discrete values:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"1    845\\n\",\n       \"2    155\\n\",\n       \"Name: number_people_liable, dtype: int64\"\n      ]\n     },\n     \"execution_count\": 7,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"data.number_people_liable.value_counts()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"We may therefore treat it as a categorical feature. Note, however, that we may need to reconsider this option if more values appear in testing phases.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"data.number_people_liable = data.number_people_liable.astype('object')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Before proceeding any further with model development, let us split the original dataset into two sets: a **baseline** set that will be used as a reference set, and a **sample** set which will mimic input data to the model once the model is in use.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df_baseline, df_sample = train_test_split(data, train_size=0.8, random_state=0)\\n\",\n    \"\\n\",\n    \"df_baseline.to_json('df_baseline.json', orient='records', lines=True)\\n\",\n    \"df_sample.to_json('df_sample.json', orient='records', lines=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"We will train a **Logistic Regression** classifier. Since our data contains categorical features, we will need to start our pipeline with an encoder.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"pipeline = make_pipeline(\\n\",\n    \"    OneHotEncoder(\\n\",\n    \"        handle_unknown='ignore', \\n\",\n    \"        sparse=True\\n\",\n    \"    ),\\n\",\n    \"    LogisticRegression(\\n\",\n    \"        max_iter=1000,\\n\",\n    \"        random_state=0\\n\",\n    \"    )\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**Logistic Regression** has multiple parameters which can be tuned. Among these are `C`, `solver`, and `class_weight`, which will be optimized by **GridSearchCV**. We provide GridSearchCV a list of values for each of these parameters.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"parameters = dict(\\n\",\n    \"    logisticregression__C=np.logspace(-4, 4, 50), # Inverse of regularization strength\\n\",\n    \"    logisticregression__solver=['liblinear', 'lbfgs', 'newton-cg'],\\n\",\n    \"    logisticregression__class_weight=['balanced', None]\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Our data still contains non-predictive features, such as `id`, `label` and `gender` (excluded to remove explicit bias). We remove these below.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"predictive_features = [\\n\",\n    \"    f for f in list(data.columns.values) \\n\",\n    \"    if f not in ['id', 'label_value', 'gender']\\n\",\n    \"]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"As a sanity check, let us see which features are automatically encoded as **numeric**, and which are encoded as **categorical**.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"categorical_features = [\\n\",\n    \"    f for f in list(data.select_dtypes(include=['category', 'object'])) \\n\",\n    \"    if f in predictive_features\\n\",\n    \"]\\n\",\n    \"\\n\",\n    \"numerical_features = [\\n\",\n    \"    f for f in predictive_features \\n\",\n    \"    if f not in categorical_features\\n\",\n    \"]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**Categorical features**:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"['checking_status', 'credit_history', 'purpose', 'savings_account', 'present_employment_since', 'debtors_guarantors', 'property', 'installment_plans', 'housing', 'job', 'number_people_liable', 'telephone', 'foreign_worker']\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(categorical_features)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**Numerical features**:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"['duration_months', 'credit_amount', 'installment_rate', 'present_residence_since', 'age_years', 'number_existing_credits']\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(numerical_features)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Everything looks good; let us proceed with training. We need to specify **predictive** and **response** variables for each of the training and test sets. We set these by filtering the baseline and sample sets.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"X_train = df_baseline[predictive_features]\\n\",\n    \"X_test = df_sample[predictive_features]\\n\",\n    \"\\n\",\n    \"y_train = df_baseline['label_value']\\n\",\n    \"y_test = df_sample['label_value']\\n\",\n    \"\\n\",\n    \"X_train.to_json('X_train.json', orient='records', lines=True)\\n\",\n    \"X_test.to_json('X_test.json', orient='records', lines=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"We may now fit the classifier to the training data. Since \\\"it is worse to classify a customer as good when they are bad, than it is to classify a customer as bad when they are good\\\", we will use an **F_beta metric**, with `beta=2`, to judge the performance of our model.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"GridSearchCV(cv=RepeatedStratifiedKFold(n_repeats=3, n_splits=10, random_state=0),\\n\",\n       \"             error_score=nan,\\n\",\n       \"             estimator=Pipeline(memory=None,\\n\",\n       \"                                steps=[('onehotencoder',\\n\",\n       \"                                        OneHotEncoder(categories='auto',\\n\",\n       \"                                                      drop=None,\\n\",\n       \"                                                      dtype=<class 'numpy.float64'>,\\n\",\n       \"                                                      handle_unknown='ignore',\\n\",\n       \"                                                      sparse=True)),\\n\",\n       \"                                       ('logisticregression',\\n\",\n       \"                                        LogisticRegression(C=1.0,\\n\",\n       \"                                                           class_weight=None,\\n\",\n       \"                                                           dual=False,\\n\",\n       \"                                                           fit_intercept=...\\n\",\n       \"       3.39322177e+02, 4.94171336e+02, 7.19685673e+02, 1.04811313e+03,\\n\",\n       \"       1.52641797e+03, 2.22299648e+03, 3.23745754e+03, 4.71486636e+03,\\n\",\n       \"       6.86648845e+03, 1.00000000e+04]),\\n\",\n       \"                         'logisticregression__class_weight': ['balanced', None],\\n\",\n       \"                         'logisticregression__solver': ['liblinear', 'lbfgs',\\n\",\n       \"                                                        'newton-cg']},\\n\",\n       \"             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\\n\",\n       \"             scoring=make_scorer(fbeta_score, beta=2), verbose=0)\"\n      ]\n     },\n     \"execution_count\": 17,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"clf_GS = GridSearchCV(\\n\",\n    \"    estimator=pipeline, \\n\",\n    \"    param_grid=parameters,\\n\",\n    \"    n_jobs=-1,\\n\",\n    \"    scoring=make_scorer(fbeta_score, beta=2),\\n\",\n    \"    cv=RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=0)\\n\",\n    \")\\n\",\n    \"clf_GS.fit(X_train, y_train)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"Pipeline(memory=None,\\n\",\n       \"         steps=[('onehotencoder',\\n\",\n       \"                 OneHotEncoder(categories='auto', drop=None,\\n\",\n       \"                               dtype=<class 'numpy.float64'>,\\n\",\n       \"                               handle_unknown='ignore', sparse=True)),\\n\",\n       \"                ('logisticregression',\\n\",\n       \"                 LogisticRegression(C=0.0020235896477251557,\\n\",\n       \"                                    class_weight='balanced', dual=False,\\n\",\n       \"                                    fit_intercept=True, intercept_scaling=1,\\n\",\n       \"                                    l1_ratio=None, max_iter=1000,\\n\",\n       \"                                    multi_class='auto', n_jobs=None,\\n\",\n       \"                                    penalty='l2', random_state=0,\\n\",\n       \"                                    solver='lbfgs', tol=0.0001, verbose=0,\\n\",\n       \"                                    warm_start=False))],\\n\",\n       \"         verbose=False)\"\n      ]\n     },\n     \"execution_count\": 19,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"clf_GS.best_estimator_\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let's examine the parameters of the best estimator more carefully.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"{'logisticregression__C': 0.0020235896477251557,\\n\",\n       \" 'logisticregression__class_weight': 'balanced',\\n\",\n       \" 'logisticregression__solver': 'lbfgs'}\"\n      ]\n     },\n     \"execution_count\": 20,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"clf_GS.best_params_\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"It appears that the best logistic regression classifier is one with a `solver='lbfgs'` and `class_weight='balanced'`. This classifier achived the best score:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0.6720094431830962\"\n      ]\n     },\n     \"execution_count\": 21,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"clf_GS.best_score_\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**II - Model Evaluation**\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Before saving our trained model for further use, let's look at some performance metrics. We will evaluate the model on both the training and test sets; we would like to see a stable performance.\\n\",\n    \"\\n\",\n    \"For repeatability, let's define a function which computes multiple metrics at-a-time:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def compute_metrics(y, y_preds):\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    A function to evaluate a classification model\\n\",\n    \"    \\n\",\n    \"    param: y: true (actual) labels\\n\",\n    \"    param: y_preds: predicted labels (as scored by model)\\n\",\n    \"    \\n\",\n    \"    return: mutiple classification performance metrics\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"    \\n\",\n    \"    return [\\n\",\n    \"        accuracy_score(y, y_preds),\\n\",\n    \"        precision_score(y, y_preds),\\n\",\n    \"        recall_score(y, y_preds),\\n\",\n    \"        f1_score(y, y_preds),\\n\",\n    \"        fbeta_score(y, y_preds, beta=2),\\n\",\n    \"    ]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let us now compute predictions on both training and test sets:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"y_test_preds = clf_GS.best_estimator_.predict(X_test)\\n\",\n    \"y_train_preds = clf_GS.best_estimator_.predict(X_train)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"We will display performance metrics in a DataFrame:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"preformance_df = pd.DataFrame(\\n\",\n    \"    data=[{}],\\n\",\n    \"    columns=['Accuracy', 'Precision', 'Recall', 'F1 score', 'F2 Score'],\\n\",\n    \"    index=['Training Set', 'Test Set']\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"preformance_df.loc['Training Set',:] = compute_metrics(y=y_train, y_preds=y_train_preds)\\n\",\n    \"preformance_df.loc['Test Set',:] = compute_metrics(y=y_test, y_preds=y_test_preds)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Here's how our model performed:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 26,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>Accuracy</th>\\n\",\n       \"      <th>Precision</th>\\n\",\n       \"      <th>Recall</th>\\n\",\n       \"      <th>F1 score</th>\\n\",\n       \"      <th>F2 Score</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Training Set</th>\\n\",\n       \"      <td>0.725</td>\\n\",\n       \"      <td>0.531250</td>\\n\",\n       \"      <td>0.772727</td>\\n\",\n       \"      <td>0.629630</td>\\n\",\n       \"      <td>0.708333</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>Test Set</th>\\n\",\n       \"      <td>0.665</td>\\n\",\n       \"      <td>0.451613</td>\\n\",\n       \"      <td>0.724138</td>\\n\",\n       \"      <td>0.556291</td>\\n\",\n       \"      <td>0.646154</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"              Accuracy  Precision    Recall  F1 score  F2 Score\\n\",\n       \"Training Set     0.725   0.531250  0.772727  0.629630  0.708333\\n\",\n       \"Test Set         0.665   0.451613  0.724138  0.556291  0.646154\"\n      ]\n     },\n     \"execution_count\": 26,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"preformance_df\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"While it's good to see that the performance on the training set is not too far off from the performance on the test set, further model improvements are needed to achieve better F2 scores. For now, we will contend with this model and use it to produce new predictions.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**III - Saving and Loading the Trained Model**\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Now that the model is **trained** and **evaluated**, we save it in a binary format. It will then be loaded and used to make new predictions.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"pickle.dump(clf_GS.best_estimator_, open(\\\"logreg_classifier.pickle\\\", 'wb'))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The model is reloaded on-demand as follows:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 58,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"logreg_classifier = pickle.load(open(\\\"logreg_classifier.pickle\\\", 'rb'))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Predictions are produced on-demand by calling the `predict()` function:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 59,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"new_preds = logreg_classifier.predict(X_test)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**IV - Evaluating Bias on Protected Classes**\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Since `gender` is a protected class, we have excluded it from the list of predictive features. However, this does not guarantee that the model is not implicitly biased, as `gender` could potentially be inferred from other features. It is therefore imperative that we evaluate our model for Bias.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"To that end, let us produce some predictions and append them to our labeled baseline and sample sets.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 60,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df_baseline_scored = df_baseline.copy(deep=True)\\n\",\n    \"df_baseline_scored[\\\"score\\\"] = logreg_classifier.predict(\\n\",\n    \"    df_baseline[predictive_features])\\n\",\n    \"\\n\",\n    \"df_sample_scored = df_sample.copy(deep=True)\\n\",\n    \"df_sample_scored[\\\"score\\\"] = logreg_classifier.predict(\\n\",\n    \"    df_sample[predictive_features])\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let's save these two DataFrames before proceeding further:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 61,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df_baseline_scored.to_json('df_baseline_scored.json', orient='records', lines=True)\\n\",\n    \"df_sample_scored.to_json('df_sample_scored.json', orient='records', lines=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Now, we call the aequitas preprocessing function on our datasets, filtered to the features we care about: `score` (prediction), `label_value` (true label), and `gender` (protected class):\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 62,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"df_baseline_scored_processed, _ = preprocess_input_df(\\n\",\n    \"    df_baseline_scored.loc[:,['score', 'label_value', 'gender']]\\n\",\n    \")\\n\",\n    \"df_sample_scored_processed, _ = preprocess_input_df(\\n\",\n    \"    df_sample_scored.loc[:,['score', 'label_value', 'gender']]\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let's start by computing some `Group` Metrics:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 63,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"g_baseline, g_sample = Group(), Group()\\n\",\n    \"xtab_baseline, _ = g_baseline.get_crosstabs(df_baseline_scored_processed)\\n\",\n    \"xtab_sample, _ = g_sample.get_crosstabs(df_sample_scored_processed)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 64,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"absolute_metrics_baseline = g_baseline.list_absolute_metrics(xtab_baseline)\\n\",\n    \"absolute_metrics_sample = g_sample.list_absolute_metrics(xtab_sample)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Here are the absolute metrics, computed on baseline and sample sets, respectively:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 65,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>attribute_name</th>\\n\",\n       \"      <th>attribute_value</th>\\n\",\n       \"      <th>tpr</th>\\n\",\n       \"      <th>tnr</th>\\n\",\n       \"      <th>for</th>\\n\",\n       \"      <th>fdr</th>\\n\",\n       \"      <th>fpr</th>\\n\",\n       \"      <th>fnr</th>\\n\",\n       \"      <th>npv</th>\\n\",\n       \"      <th>precision</th>\\n\",\n       \"      <th>ppr</th>\\n\",\n       \"      <th>pprev</th>\\n\",\n       \"      <th>prev</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>0.80</td>\\n\",\n       \"      <td>0.67</td>\\n\",\n       \"      <td>0.14</td>\\n\",\n       \"      <td>0.43</td>\\n\",\n       \"      <td>0.33</td>\\n\",\n       \"      <td>0.20</td>\\n\",\n       \"      <td>0.86</td>\\n\",\n       \"      <td>0.57</td>\\n\",\n       \"      <td>0.34</td>\\n\",\n       \"      <td>0.50</td>\\n\",\n       \"      <td>0.35</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>0.76</td>\\n\",\n       \"      <td>0.72</td>\\n\",\n       \"      <td>0.12</td>\\n\",\n       \"      <td>0.49</td>\\n\",\n       \"      <td>0.28</td>\\n\",\n       \"      <td>0.24</td>\\n\",\n       \"      <td>0.88</td>\\n\",\n       \"      <td>0.51</td>\\n\",\n       \"      <td>0.66</td>\\n\",\n       \"      <td>0.42</td>\\n\",\n       \"      <td>0.28</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"  attribute_name attribute_value   tpr   tnr   for   fdr   fpr   fnr   npv  \\\\\\n\",\n       \"0         gender          female  0.80  0.67  0.14  0.43  0.33  0.20  0.86   \\n\",\n       \"1         gender            male  0.76  0.72  0.12  0.49  0.28  0.24  0.88   \\n\",\n       \"\\n\",\n       \"   precision   ppr  pprev  prev  \\n\",\n       \"0       0.57  0.34   0.50  0.35  \\n\",\n       \"1       0.51  0.66   0.42  0.28  \"\n      ]\n     },\n     \"execution_count\": 65,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"xtab_baseline[['attribute_name', 'attribute_value'] + absolute_metrics_baseline].round(2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 66,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>attribute_name</th>\\n\",\n       \"      <th>attribute_value</th>\\n\",\n       \"      <th>tpr</th>\\n\",\n       \"      <th>tnr</th>\\n\",\n       \"      <th>for</th>\\n\",\n       \"      <th>fdr</th>\\n\",\n       \"      <th>fpr</th>\\n\",\n       \"      <th>fnr</th>\\n\",\n       \"      <th>npv</th>\\n\",\n       \"      <th>precision</th>\\n\",\n       \"      <th>ppr</th>\\n\",\n       \"      <th>pprev</th>\\n\",\n       \"      <th>prev</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>0.68</td>\\n\",\n       \"      <td>0.70</td>\\n\",\n       \"      <td>0.20</td>\\n\",\n       \"      <td>0.45</td>\\n\",\n       \"      <td>0.30</td>\\n\",\n       \"      <td>0.32</td>\\n\",\n       \"      <td>0.80</td>\\n\",\n       \"      <td>0.55</td>\\n\",\n       \"      <td>0.33</td>\\n\",\n       \"      <td>0.43</td>\\n\",\n       \"      <td>0.35</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>0.76</td>\\n\",\n       \"      <td>0.61</td>\\n\",\n       \"      <td>0.12</td>\\n\",\n       \"      <td>0.60</td>\\n\",\n       \"      <td>0.39</td>\\n\",\n       \"      <td>0.24</td>\\n\",\n       \"      <td>0.88</td>\\n\",\n       \"      <td>0.40</td>\\n\",\n       \"      <td>0.67</td>\\n\",\n       \"      <td>0.48</td>\\n\",\n       \"      <td>0.26</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"  attribute_name attribute_value   tpr   tnr   for   fdr   fpr   fnr   npv  \\\\\\n\",\n       \"0         gender          female  0.68  0.70  0.20  0.45  0.30  0.32  0.80   \\n\",\n       \"1         gender            male  0.76  0.61  0.12  0.60  0.39  0.24  0.88   \\n\",\n       \"\\n\",\n       \"   precision   ppr  pprev  prev  \\n\",\n       \"0       0.55  0.33   0.43  0.35  \\n\",\n       \"1       0.40  0.67   0.48  0.26  \"\n      ]\n     },\n     \"execution_count\": 66,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"xtab_sample[['attribute_name', 'attribute_value'] + absolute_metrics_sample].round(2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"We can also add some raw counts (group sizes) as follows:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 67,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>model_id</th>\\n\",\n       \"      <th>score_threshold</th>\\n\",\n       \"      <th>k</th>\\n\",\n       \"      <th>attribute_name</th>\\n\",\n       \"      <th>attribute_value</th>\\n\",\n       \"      <th>pp</th>\\n\",\n       \"      <th>pn</th>\\n\",\n       \"      <th>fp</th>\\n\",\n       \"      <th>fn</th>\\n\",\n       \"      <th>tn</th>\\n\",\n       \"      <th>tp</th>\\n\",\n       \"      <th>group_label_pos</th>\\n\",\n       \"      <th>group_label_neg</th>\\n\",\n       \"      <th>group_size</th>\\n\",\n       \"      <th>total_entities</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>binary 0/1</td>\\n\",\n       \"      <td>352</td>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>118</td>\\n\",\n       \"      <td>120</td>\\n\",\n       \"      <td>51</td>\\n\",\n       \"      <td>17</td>\\n\",\n       \"      <td>103</td>\\n\",\n       \"      <td>67</td>\\n\",\n       \"      <td>84</td>\\n\",\n       \"      <td>154</td>\\n\",\n       \"      <td>238</td>\\n\",\n       \"      <td>800</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>binary 0/1</td>\\n\",\n       \"      <td>352</td>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>234</td>\\n\",\n       \"      <td>328</td>\\n\",\n       \"      <td>114</td>\\n\",\n       \"      <td>38</td>\\n\",\n       \"      <td>290</td>\\n\",\n       \"      <td>120</td>\\n\",\n       \"      <td>158</td>\\n\",\n       \"      <td>404</td>\\n\",\n       \"      <td>562</td>\\n\",\n       \"      <td>800</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   model_id score_threshold    k attribute_name attribute_value   pp   pn  \\\\\\n\",\n       \"0         0      binary 0/1  352         gender          female  118  120   \\n\",\n       \"1         0      binary 0/1  352         gender            male  234  328   \\n\",\n       \"\\n\",\n       \"    fp  fn   tn   tp  group_label_pos  group_label_neg  group_size  \\\\\\n\",\n       \"0   51  17  103   67               84              154         238   \\n\",\n       \"1  114  38  290  120              158              404         562   \\n\",\n       \"\\n\",\n       \"   total_entities  \\n\",\n       \"0             800  \\n\",\n       \"1             800  \"\n      ]\n     },\n     \"execution_count\": 67,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"xtab_baseline[[col for col in xtab_baseline.columns if col not in absolute_metrics_baseline]]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 68,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>model_id</th>\\n\",\n       \"      <th>score_threshold</th>\\n\",\n       \"      <th>k</th>\\n\",\n       \"      <th>attribute_name</th>\\n\",\n       \"      <th>attribute_value</th>\\n\",\n       \"      <th>pp</th>\\n\",\n       \"      <th>pn</th>\\n\",\n       \"      <th>fp</th>\\n\",\n       \"      <th>fn</th>\\n\",\n       \"      <th>tn</th>\\n\",\n       \"      <th>tp</th>\\n\",\n       \"      <th>group_label_pos</th>\\n\",\n       \"      <th>group_label_neg</th>\\n\",\n       \"      <th>group_size</th>\\n\",\n       \"      <th>total_entities</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>binary 0/1</td>\\n\",\n       \"      <td>93</td>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>31</td>\\n\",\n       \"      <td>41</td>\\n\",\n       \"      <td>14</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>33</td>\\n\",\n       \"      <td>17</td>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>47</td>\\n\",\n       \"      <td>72</td>\\n\",\n       \"      <td>200</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>binary 0/1</td>\\n\",\n       \"      <td>93</td>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>62</td>\\n\",\n       \"      <td>66</td>\\n\",\n       \"      <td>37</td>\\n\",\n       \"      <td>8</td>\\n\",\n       \"      <td>58</td>\\n\",\n       \"      <td>25</td>\\n\",\n       \"      <td>33</td>\\n\",\n       \"      <td>95</td>\\n\",\n       \"      <td>128</td>\\n\",\n       \"      <td>200</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"   model_id score_threshold   k attribute_name attribute_value  pp  pn  fp  \\\\\\n\",\n       \"0         0      binary 0/1  93         gender          female  31  41  14   \\n\",\n       \"1         0      binary 0/1  93         gender            male  62  66  37   \\n\",\n       \"\\n\",\n       \"   fn  tn  tp  group_label_pos  group_label_neg  group_size  total_entities  \\n\",\n       \"0   8  33  17               25               47          72             200  \\n\",\n       \"1   8  58  25               33               95         128             200  \"\n      ]\n     },\n     \"execution_count\": 68,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"xtab_sample[[col for col in xtab_sample.columns if col not in absolute_metrics_sample]]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"That's it for `Group` metrics. Let's move on to `Bias` metrics.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 69,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"get_disparity_predefined_group()\\n\",\n      \"get_disparity_predefined_group()\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"b_baseline, b_sample = Bias(), Bias()\\n\",\n    \"\\n\",\n    \"bdf_baseline = b_baseline.get_disparity_predefined_groups(\\n\",\n    \"    xtab_baseline, \\n\",\n    \"    original_df=df_baseline_scored_processed, \\n\",\n    \"    ref_groups_dict={'gender':'male'}, alpha=0.05, mask_significance=True\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"bdf_sample = b_sample.get_disparity_predefined_groups(\\n\",\n    \"    xtab_sample, \\n\",\n    \"    original_df=df_sample_scored_processed, \\n\",\n    \"    ref_groups_dict={'gender':'male'}, alpha=0.05, mask_significance=True\\n\",\n    \")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"We can now compute **disparity** metrics as follows\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 70,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"calculated_disparities_baseline = b_baseline.list_disparities(bdf_baseline)\\n\",\n    \"calculated_disparities_sample = b_sample.list_disparities(bdf_sample)\\n\",\n    \"\\n\",\n    \"disparity_metrics_df_baseline = bdf_baseline[\\n\",\n    \"    ['attribute_name', 'attribute_value'] + \\\\\\n\",\n    \"        calculated_disparities_baseline\\n\",\n    \"    ]\\n\",\n    \"disparity_metrics_df_sample = bdf_sample[\\n\",\n    \"    ['attribute_name', 'attribute_value'] + \\\\\\n\",\n    \"        calculated_disparities_sample\\n\",\n    \"    ]\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Here are the computed disparity metrics on baseline and sample sets, respectively:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 71,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>attribute_name</th>\\n\",\n       \"      <th>attribute_value</th>\\n\",\n       \"      <th>ppr_disparity</th>\\n\",\n       \"      <th>pprev_disparity</th>\\n\",\n       \"      <th>precision_disparity</th>\\n\",\n       \"      <th>fdr_disparity</th>\\n\",\n       \"      <th>for_disparity</th>\\n\",\n       \"      <th>fpr_disparity</th>\\n\",\n       \"      <th>fnr_disparity</th>\\n\",\n       \"      <th>tpr_disparity</th>\\n\",\n       \"      <th>tnr_disparity</th>\\n\",\n       \"      <th>npv_disparity</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>0.504274</td>\\n\",\n       \"      <td>1.190763</td>\\n\",\n       \"      <td>1.107203</td>\\n\",\n       \"      <td>0.887154</td>\\n\",\n       \"      <td>1.222807</td>\\n\",\n       \"      <td>1.173616</td>\\n\",\n       \"      <td>0.841479</td>\\n\",\n       \"      <td>1.050198</td>\\n\",\n       \"      <td>0.931751</td>\\n\",\n       \"      <td>0.970805</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"  attribute_name attribute_value  ppr_disparity  pprev_disparity  \\\\\\n\",\n       \"0         gender          female       0.504274         1.190763   \\n\",\n       \"1         gender            male       1.000000         1.000000   \\n\",\n       \"\\n\",\n       \"   precision_disparity  fdr_disparity  for_disparity  fpr_disparity  \\\\\\n\",\n       \"0             1.107203       0.887154       1.222807       1.173616   \\n\",\n       \"1             1.000000       1.000000       1.000000       1.000000   \\n\",\n       \"\\n\",\n       \"   fnr_disparity  tpr_disparity  tnr_disparity  npv_disparity  \\n\",\n       \"0       0.841479       1.050198       0.931751       0.970805  \\n\",\n       \"1       1.000000       1.000000       1.000000       1.000000  \"\n      ]\n     },\n     \"execution_count\": 71,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"disparity_metrics_df_baseline\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 72,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>attribute_name</th>\\n\",\n       \"      <th>attribute_value</th>\\n\",\n       \"      <th>ppr_disparity</th>\\n\",\n       \"      <th>pprev_disparity</th>\\n\",\n       \"      <th>precision_disparity</th>\\n\",\n       \"      <th>fdr_disparity</th>\\n\",\n       \"      <th>for_disparity</th>\\n\",\n       \"      <th>fpr_disparity</th>\\n\",\n       \"      <th>fnr_disparity</th>\\n\",\n       \"      <th>tpr_disparity</th>\\n\",\n       \"      <th>tnr_disparity</th>\\n\",\n       \"      <th>npv_disparity</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>0.5</td>\\n\",\n       \"      <td>0.888889</td>\\n\",\n       \"      <td>1.36</td>\\n\",\n       \"      <td>0.756757</td>\\n\",\n       \"      <td>1.609756</td>\\n\",\n       \"      <td>0.764807</td>\\n\",\n       \"      <td>1.32</td>\\n\",\n       \"      <td>0.8976</td>\\n\",\n       \"      <td>1.150037</td>\\n\",\n       \"      <td>0.915896</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>1.0</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.00</td>\\n\",\n       \"      <td>1.0000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"  attribute_name attribute_value  ppr_disparity  pprev_disparity  \\\\\\n\",\n       \"0         gender          female            0.5         0.888889   \\n\",\n       \"1         gender            male            1.0         1.000000   \\n\",\n       \"\\n\",\n       \"   precision_disparity  fdr_disparity  for_disparity  fpr_disparity  \\\\\\n\",\n       \"0                 1.36       0.756757       1.609756       0.764807   \\n\",\n       \"1                 1.00       1.000000       1.000000       1.000000   \\n\",\n       \"\\n\",\n       \"   fnr_disparity  tpr_disparity  tnr_disparity  npv_disparity  \\n\",\n       \"0           1.32         0.8976       1.150037       0.915896  \\n\",\n       \"1           1.00         1.0000       1.000000       1.000000  \"\n      ]\n     },\n     \"execution_count\": 72,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"disparity_metrics_df_sample\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Some of the disparity metrics above are worrisome! We might need to retrain the model, possibly with better feature engineering. That's an exercise for a later time.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**V - Conforming Model Code to MOC Requirements**\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Conformance is best-demonstrated through and example. Let's look at the code below:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 73,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import pandas as pd\\n\",\n    \"import numpy as np\\n\",\n    \"import pickle\\n\",\n    \"import copy\\n\",\n    \"from aequitas.preprocessing import preprocess_input_df\\n\",\n    \"from aequitas.group import Group\\n\",\n    \"from aequitas.bias import Bias\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"# modelop.init\\n\",\n    \"def begin():\\n\",\n    \"    \\n\",\n    \"    global logreg_classifier\\n\",\n    \"    \\n\",\n    \"    # load pickled logistic regression model\\n\",\n    \"    logreg_classifier = pickle.load(open(\\\"logreg_classifier.pickle\\\", \\\"rb\\\"))\\n\",\n    \"\\n\",\n    \"    \\n\",\n    \"# modelop.score\\n\",\n    \"def action(data):\\n\",\n    \"    \\n\",\n    \"    # Turn data into DataFrame\\n\",\n    \"    data = pd.DataFrame([data])\\n\",\n    \"    \\n\",\n    \"    # There are only two unique values in data.number_people_liable.\\n\",\n    \"    # Treat it as a categorical feature\\n\",\n    \"    data.number_people_liable = data.number_people_liable.astype('object')\\n\",\n    \"\\n\",\n    \"    predictive_features = [\\n\",\n    \"        'duration_months', 'credit_amount', 'installment_rate',\\n\",\n    \"        'present_residence_since', 'age_years', 'number_existing_credits',\\n\",\n    \"        'checking_status', 'credit_history', 'purpose', 'savings_account',\\n\",\n    \"        'present_employment_since', 'debtors_guarantors', 'property',\\n\",\n    \"        'installment_plans', 'housing', 'job', 'number_people_liable',\\n\",\n    \"        'telephone', 'foreign_worker'\\n\",\n    \"    ]\\n\",\n    \"    \\n\",\n    \"    data[\\\"predicted_score\\\"] = logreg_classifier.predict(data[predictive_features])\\n\",\n    \"    \\n\",\n    \"    # MOC expects the action function to be a *yield* function\\n\",\n    \"    yield data.to_dict(orient=\\\"records\\\")\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"# modelop.metrics\\n\",\n    \"def metrics(data):\\n\",\n    \"    \\n\",\n    \"    data = pd.DataFrame(data)\\n\",\n    \"\\n\",\n    \"    # To measure Bias towards gender, filter DataFrame\\n\",\n    \"    # to \\\"score\\\", \\\"label_value\\\" (ground truth), and\\n\",\n    \"    # \\\"gender\\\" (protected attribute)\\n\",\n    \"    data_scored = data[[\\\"score\\\", \\\"label_value\\\", \\\"gender\\\"]]\\n\",\n    \"\\n\",\n    \"    # Process DataFrame\\n\",\n    \"    data_scored_processed, _ = preprocess_input_df(data_scored)\\n\",\n    \"\\n\",\n    \"    # Group Metrics\\n\",\n    \"    g = Group()\\n\",\n    \"    xtab, _ = g.get_crosstabs(data_scored_processed)\\n\",\n    \"\\n\",\n    \"    # Absolute metrics, such as 'tpr', 'tnr','precision', etc.\\n\",\n    \"    absolute_metrics = g.list_absolute_metrics(xtab)\\n\",\n    \"\\n\",\n    \"    # DataFrame of calculated absolute metrics for each sample population group\\n\",\n    \"    absolute_metrics_df = xtab[\\n\",\n    \"        ['attribute_name', 'attribute_value'] + absolute_metrics].round(2)\\n\",\n    \"\\n\",\n    \"    # For example:\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"        attribute_name  attribute_value     tpr     tnr  ... precision\\n\",\n    \"    0   gender          female              0.60    0.88 ... 0.75\\n\",\n    \"    1   gender          male                0.49    0.90 ... 0.64\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"\\n\",\n    \"    # Bias Metrics\\n\",\n    \"    b = Bias()\\n\",\n    \"\\n\",\n    \"    # Disparities calculated in relation gender for \\\"male\\\" and \\\"female\\\"\\n\",\n    \"    bias_df = b.get_disparity_predefined_groups(\\n\",\n    \"        xtab,\\n\",\n    \"        original_df=data_scored_processed,\\n\",\n    \"        ref_groups_dict={'gender': 'male'},\\n\",\n    \"        alpha=0.05, mask_significance=True\\n\",\n    \"    )\\n\",\n    \"\\n\",\n    \"    # Disparity metrics added to bias DataFrame\\n\",\n    \"    calculated_disparities = b.list_disparities(bias_df)\\n\",\n    \"\\n\",\n    \"    disparity_metrics_df = bias_df[\\n\",\n    \"        ['attribute_name', 'attribute_value'] + calculated_disparities]\\n\",\n    \"\\n\",\n    \"    # For example:\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"        attribute_name\\tattribute_value    ppr_disparity   precision_disparity\\n\",\n    \"    0   gender          female             0.714286        1.41791\\n\",\n    \"    1   gender          male               1.000000        1.000000\\n\",\n    \"    \\\"\\\"\\\"\\n\",\n    \"\\n\",\n    \"    output_metrics_df = disparity_metrics_df # or absolute_metrics_df\\n\",\n    \"\\n\",\n    \"    # Output a JSON object of calculated metrics\\n\",\n    \"    \\n\",\n    \"    # MOC expects the action function to be a *yield* function\\n\",\n    \"    yield output_metrics_df.to_dict(orient=\\\"records\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"There are four main sections that are standard to almost any model in MOC:\\n\",\n    \"1. Library imports\\n\",\n    \"2. `init` function\\n\",\n    \"3. `score` function\\n\",\n    \"4. `metrics` function\\n\",\n    \"\\n\",\n    \"**Library** imports are always at the top. We don't need to include all libraries that we used for training and model evaluation. We just need the libraries for processing and scoring.\\n\",\n    \"\\n\",\n    \"The **`init`** function runs once per deployment, and is used to load and persist into memory any variable that needs to be accessed at scoring time. For example, the init function is where we load the saved model binary. We make the variable global so it can be accessed from the scoring function.\\n\",\n    \"\\n\",\n    \"The **`score`** function is the function that runs anytime we make a scoring (prediction) request. This is where we put our prediction code. We have to remember to include any steps that were not captured by the pipeline, such as feature engineering or re-encoding.\\n\",\n    \"\\n\",\n    \"The **`metrics`** functions is where model evaluation is carried out. In our example, this is the place where we replicate the calculations of Group and/or Bias metrics.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let us test our source code to see if we missed anything. We will load input data and scored input data to test both the scoring and metrics functions:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 74,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"test_sample = pd.read_json('df_baseline.json', lines=True, orient='records')\\n\",\n    \"metrics_sample = pd.read_json('df_baseline_scored.json', lines=True, orient='records')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Let's check that the **`init`** function can load the trained model binary:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 75,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"begin()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"No errors from the **`init`** function. Let us now call the **`score`** function on input data:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 76,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"scores = next(action(test_sample.iloc[0]))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 77,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>id</th>\\n\",\n       \"      <th>duration_months</th>\\n\",\n       \"      <th>credit_amount</th>\\n\",\n       \"      <th>installment_rate</th>\\n\",\n       \"      <th>present_residence_since</th>\\n\",\n       \"      <th>age_years</th>\\n\",\n       \"      <th>number_existing_credits</th>\\n\",\n       \"      <th>checking_status</th>\\n\",\n       \"      <th>credit_history</th>\\n\",\n       \"      <th>purpose</th>\\n\",\n       \"      <th>...</th>\\n\",\n       \"      <th>property</th>\\n\",\n       \"      <th>installment_plans</th>\\n\",\n       \"      <th>housing</th>\\n\",\n       \"      <th>job</th>\\n\",\n       \"      <th>number_people_liable</th>\\n\",\n       \"      <th>telephone</th>\\n\",\n       \"      <th>foreign_worker</th>\\n\",\n       \"      <th>gender</th>\\n\",\n       \"      <th>label_value</th>\\n\",\n       \"      <th>predicted_score</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>687</td>\\n\",\n       \"      <td>36</td>\\n\",\n       \"      <td>2862</td>\\n\",\n       \"      <td>4</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>30</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>A12</td>\\n\",\n       \"      <td>A33</td>\\n\",\n       \"      <td>A40</td>\\n\",\n       \"      <td>...</td>\\n\",\n       \"      <td>A124</td>\\n\",\n       \"      <td>A143</td>\\n\",\n       \"      <td>A153</td>\\n\",\n       \"      <td>A173</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>A191</td>\\n\",\n       \"      <td>A201</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"<p>1 rows × 23 columns</p>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"    id  duration_months  credit_amount  installment_rate  \\\\\\n\",\n       \"0  687               36           2862                 4   \\n\",\n       \"\\n\",\n       \"   present_residence_since  age_years  number_existing_credits  \\\\\\n\",\n       \"0                        3         30                        1   \\n\",\n       \"\\n\",\n       \"  checking_status credit_history purpose  ... property installment_plans  \\\\\\n\",\n       \"0             A12            A33     A40  ...     A124              A143   \\n\",\n       \"\\n\",\n       \"  housing   job number_people_liable telephone foreign_worker  gender  \\\\\\n\",\n       \"0    A153  A173                    1      A191           A201    male   \\n\",\n       \"\\n\",\n       \"  label_value predicted_score  \\n\",\n       \"0           0               1  \\n\",\n       \"\\n\",\n       \"[1 rows x 23 columns]\"\n      ]\n     },\n     \"execution_count\": 77,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"pd.DataFrame(scores).head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"We have scores! Last but not least, let's call the **`metrics`** function on scored data:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"bias = next(metrics(metrics_sample))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 79,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>attribute_name</th>\\n\",\n       \"      <th>attribute_value</th>\\n\",\n       \"      <th>ppr_disparity</th>\\n\",\n       \"      <th>pprev_disparity</th>\\n\",\n       \"      <th>precision_disparity</th>\\n\",\n       \"      <th>fdr_disparity</th>\\n\",\n       \"      <th>for_disparity</th>\\n\",\n       \"      <th>fpr_disparity</th>\\n\",\n       \"      <th>fnr_disparity</th>\\n\",\n       \"      <th>tpr_disparity</th>\\n\",\n       \"      <th>tnr_disparity</th>\\n\",\n       \"      <th>npv_disparity</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>female</td>\\n\",\n       \"      <td>0.504274</td>\\n\",\n       \"      <td>1.190763</td>\\n\",\n       \"      <td>1.107203</td>\\n\",\n       \"      <td>0.887154</td>\\n\",\n       \"      <td>1.222807</td>\\n\",\n       \"      <td>1.173616</td>\\n\",\n       \"      <td>0.841479</td>\\n\",\n       \"      <td>1.050198</td>\\n\",\n       \"      <td>0.931751</td>\\n\",\n       \"      <td>0.970805</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>gender</td>\\n\",\n       \"      <td>male</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"  attribute_name attribute_value  ppr_disparity  pprev_disparity  \\\\\\n\",\n       \"0         gender          female       0.504274         1.190763   \\n\",\n       \"1         gender            male       1.000000         1.000000   \\n\",\n       \"\\n\",\n       \"   precision_disparity  fdr_disparity  for_disparity  fpr_disparity  \\\\\\n\",\n       \"0             1.107203       0.887154       1.222807       1.173616   \\n\",\n       \"1             1.000000       1.000000       1.000000       1.000000   \\n\",\n       \"\\n\",\n       \"   fnr_disparity  tpr_disparity  tnr_disparity  npv_disparity  \\n\",\n       \"0       0.841479       1.050198       0.931751       0.970805  \\n\",\n       \"1       1.000000       1.000000       1.000000       1.000000  \"\n      ]\n     },\n     \"execution_count\": 79,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"pd.DataFrame(bias).head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**Prefect!**\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"interpreter\": {\n   \"hash\": \"1bc0af681b6debbd76b10de7ba3014cd62e1e3ee55e8e9a892bbbe23fd8d618c\"\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3.6.9 64-bit ('modelop': conda)\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.6.9\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}",
        "sourceCodeFilePath" : "logistic_regression_model_trainer.ipynb",
        "sourceCodeType" : "MODEL",
        "initFunction" : "begin",
        "scoreFunction" : "action"
      }, {
        "assetId" : "b25f4cf2-0333-3559-953d-68ae15a8da70",
        "name" : "german_credit.py",
        "assetType" : "SOURCE_CODE",
        "assetRole" : "MODEL_SOURCE",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "primaryModelSource" : true,
        "sourceCode" : "# modelop.schema.0: input_schema.avsc\n# modelop.schema.1: output_schema.avsc\n\nimport pandas as pd\nimport pickle\nimport numpy as np\n\n# Bias libraries\nfrom aequitas.preprocessing import preprocess_input_df\nfrom aequitas.group import Group\nfrom aequitas.bias import Bias \n\n\n# modelop.init\ndef begin():\n    \n    global logreg_classifier\n    \n    # load pickled logistic regression model\n    logreg_classifier = pickle.load(open(\"logreg_classifier.pickle\", \"rb\"))\n\n    \n# modelop.score\ndef action(data):\n    \n    # Turn data into DataFrame\n    data = pd.DataFrame([data])\n    \n    # There are only two unique values in data.number_people_liable.\n    # Treat it as a categorical feature\n    data.number_people_liable = data.number_people_liable.astype('object')\n\n    predictive_features = [\n        'duration_months', 'credit_amount', 'installment_rate',\n        'present_residence_since', 'age_years', 'number_existing_credits',\n        'checking_status', 'credit_history', 'purpose', 'savings_account',\n        'present_employment_since', 'debtors_guarantors', 'property',\n        'installment_plans', 'housing', 'job', 'number_people_liable',\n        'telephone', 'foreign_worker'\n    ]\n    \n    data[\"score\"] = logreg_classifier.predict(data[predictive_features])\n    \n    # MOC expects the action function to be a *yield* function\n    yield data.to_dict(orient=\"records\")\n\n\n# modelop.metrics\ndef metrics(data):\n    \n    data = pd.DataFrame(data)\n\n    # To measure Bias towards gender, filter DataFrame\n    # to \"score\", \"label_value\" (ground truth), and\n    # \"gender\" (protected attribute)\n    data_scored = data[[\"score\", \"label_value\", \"gender\"]]\n\n    # Process DataFrame\n    data_scored_processed, _ = preprocess_input_df(data_scored)\n\n    # Group Metrics\n    g = Group()\n    xtab, _ = g.get_crosstabs(data_scored_processed)\n\n    # Absolute metrics, such as 'tpr', 'tnr','precision', etc.\n    absolute_metrics = g.list_absolute_metrics(xtab)\n\n    # DataFrame of calculated absolute metrics for each sample population group\n    absolute_metrics_df = xtab[\n        ['attribute_name', 'attribute_value'] + absolute_metrics].round(2)\n\n    # For example:\n    \"\"\"\n        attribute_name  attribute_value     tpr     tnr  ... precision\n    0   gender          female              0.60    0.88 ... 0.75\n    1   gender          male                0.49    0.90 ... 0.64\n    \"\"\"\n\n    # Bias Metrics\n    b = Bias()\n\n    # Disparities calculated in relation gender for \"male\" and \"female\"\n    bias_df = b.get_disparity_predefined_groups(\n        xtab,\n        original_df=data_scored_processed,\n        ref_groups_dict={'gender': 'male'},\n        alpha=0.05, mask_significance=True\n    )\n\n    # Disparity metrics added to bias DataFrame\n    calculated_disparities = b.list_disparities(bias_df)\n\n    disparity_metrics_df = bias_df[\n        ['attribute_name', 'attribute_value'] + calculated_disparities]\n\n    # For example:\n    \"\"\"\n        attribute_name\tattribute_value    ppr_disparity   precision_disparity\n    0   gender          female             0.714286        1.41791\n    1   gender          male               1.000000        1.000000\n    \"\"\"\n\n    output_metrics_df = disparity_metrics_df # or absolute_metrics_df\n\n    # Output a JSON object of calculated metrics\n    yield output_metrics_df.to_dict(orient=\"records\")\n",
        "sourceCodeFilePath" : "german_credit.py",
        "sourceCodeType" : "MODEL",
        "initFunction" : "begin",
        "scoreFunction" : "action",
        "metricsFunction" : "metrics"
      }, {
        "assetId" : "61cb5e11-893e-3adc-a7eb-a91c0200e05f",
        "name" : "back_test_comparator.dmn",
        "assetType" : "SOURCE_CODE",
        "assetRole" : "TEST_RESULT_COMPARATOR",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "primaryModelSource" : false,
        "sourceCode" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"https://www.omg.org/spec/DMN/20191111/MODEL/\" xmlns:dmndi=\"https://www.omg.org/spec/DMN/20191111/DMNDI/\" xmlns:dc=\"http://www.omg.org/spec/DMN/20180521/DC/\" xmlns:camunda=\"http://camunda.org/schema/1.0/dmn\" xmlns:biodi=\"http://bpmn.io/schema/dmn/biodi/2.0\" id=\"Definitions_0wb2acp\" name=\"DRD\" namespace=\"http://camunda.org/schema/1.0/dmn\" exporter=\"Camunda Modeler\" exporterVersion=\"4.10.0\">\n  <decision id=\"Decision_0q87m1a\" name=\"Model Test Comparator\">\n    <decisionTable id=\"decisionTable_1\" hitPolicy=\"COLLECT\" biodi:annotationsWidth=\"400\">\n      <input id=\"input_1\" label=\"pprev_disparity\" biodi:width=\"150\" camunda:inputVariable=\"pprev_disparity\">\n        <inputExpression id=\"inputExpression_1\" typeRef=\"double\" expressionLanguage=\"feel\">\n          <text></text>\n        </inputExpression>\n      </input>\n      <input id=\"InputClause_08e7ybd\" label=\"pprev_disparity\" biodi:width=\"150\" camunda:inputVariable=\"pprev_disparity\">\n        <inputExpression id=\"LiteralExpression_0nr86e9\" typeRef=\"double\" expressionLanguage=\"feel\">\n          <text></text>\n        </inputExpression>\n      </input>\n      <output id=\"output_1\" label=\"passes\" name=\"passes\" typeRef=\"boolean\" biodi:width=\"150\" />\n      <output id=\"OutputClause_05h1co6\" label=\"reason\" name=\"reason\" typeRef=\"string\" biodi:width=\"150\" />\n      <output id=\"OutputClause_13ewsro\" label=\"category\" name=\"category\" typeRef=\"string\" biodi:width=\"150\" />\n      <rule id=\"DecisionRule_0aznir8\">\n        <inputEntry id=\"UnaryTests_1x4xf13\">\n          <text>&lt;= 0.8</text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1wcb8sj\">\n          <text></text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_0a5bp3u\">\n          <text>false</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_07v4w07\">\n          <text>\"Predicted Prevalence Disparity Below Threshold of 0.8\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_1ub6nly\">\n          <text>\"EthicalFairness\"</text>\n        </outputEntry>\n      </rule>\n      <rule id=\"DecisionRule_0ggwcp6\">\n        <inputEntry id=\"UnaryTests_0lmlprd\">\n          <text></text>\n        </inputEntry>\n        <inputEntry id=\"UnaryTests_1u0j72q\">\n          <text>&gt;= 1.25</text>\n        </inputEntry>\n        <outputEntry id=\"LiteralExpression_1id0elh\">\n          <text>false</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_1qpb76t\">\n          <text>\"Predicted Prevalence Disarity Above Threshold of 1.25\"</text>\n        </outputEntry>\n        <outputEntry id=\"LiteralExpression_09zevgh\">\n          <text>\"EthicalFairness\"</text>\n        </outputEntry>\n      </rule>\n    </decisionTable>\n  </decision>\n  <dmndi:DMNDI>\n    <dmndi:DMNDiagram id=\"DMNDiagram_0pjncth\">\n      <dmndi:DMNShape id=\"DMNShape_1xroslw\" dmnElementRef=\"Decision_0q87m1a\">\n        <dc:Bounds height=\"80\" width=\"180\" x=\"150\" y=\"150\" />\n      </dmndi:DMNShape>\n    </dmndi:DMNDiagram>\n  </dmndi:DMNDI>\n</definitions>\n",
        "sourceCodeFilePath" : "back_test_comparator.dmn",
        "sourceCodeType" : "MODEL"
      }, {
        "assetId" : "e3aec392-707a-4987-a340-27b0d20fe84a",
        "name" : "1d9a7d1e-132c-4eba-9ae9-73d087420060/e3aec392-707a-4987-a340-27b0d20fe84a.json",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "TRAINING_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "1a9c72d8cfe2172b26abefc1d0c42d67518f6e16e6540a155cdf88e066ab0d6a"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/1d9a7d1e-132c-4eba-9ae9-73d087420060/e3aec392-707a-4987-a340-27b0d20fe84a.json",
        "filename" : "training_data.json",
        "fileFormat" : "JSON",
        "fileSize" : 341431
      }, {
        "assetId" : "0bfe1bc7-e43d-44d6-ad1b-2253d7494b76",
        "name" : "1d9a7d1e-132c-4eba-9ae9-73d087420060/0bfe1bc7-e43d-44d6-ad1b-2253d7494b76.json",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "COMPARATOR_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "ff72c27d90eda63f11d1d21988329cae50d44101ce02d2a506b034b14d9aa3d1"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/1d9a7d1e-132c-4eba-9ae9-73d087420060/0bfe1bc7-e43d-44d6-ad1b-2253d7494b76.json",
        "filename" : "comparator_data.json",
        "fileFormat" : "JSON",
        "fileSize" : 47857
      }, {
        "assetId" : "5a8cdcd9-9472-42e6-931f-37adb45fdf4f",
        "name" : "1d9a7d1e-132c-4eba-9ae9-73d087420060/5a8cdcd9-9472-42e6-931f-37adb45fdf4f.gitignore",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "UNKNOWN",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "f761b6f949f1d204265fc626555b30cc74d97766a1fc3a038582760719b7131e"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/1d9a7d1e-132c-4eba-9ae9-73d087420060/5a8cdcd9-9472-42e6-931f-37adb45fdf4f.gitignore",
        "filename" : ".gitignore",
        "fileFormat" : "UNKNOWN",
        "fileSize" : 92
      }, {
        "assetId" : "951f24cc-9fd2-42fd-959e-b2d9e471050e",
        "name" : "1d9a7d1e-132c-4eba-9ae9-73d087420060/951f24cc-9fd2-42fd-959e-b2d9e471050e.json",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "BASELINE_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "e170f8ca2360e82679d4633c35b2908f93a8b41bcd63d027cd500daa19da76d3"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/1d9a7d1e-132c-4eba-9ae9-73d087420060/951f24cc-9fd2-42fd-959e-b2d9e471050e.json",
        "filename" : "baseline_data.json",
        "fileFormat" : "JSON",
        "fileSize" : 382615
      }, {
        "assetId" : "c35d236e-1301-44b3-a64d-2daa1cc723a8",
        "name" : "1d9a7d1e-132c-4eba-9ae9-73d087420060/c35d236e-1301-44b3-a64d-2daa1cc723a8.gitattributes",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "UNKNOWN",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "1a1dbe176bc233b499d35a57db7513f2941c99ab9759f177830c9149be99005b"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/1d9a7d1e-132c-4eba-9ae9-73d087420060/c35d236e-1301-44b3-a64d-2daa1cc723a8.gitattributes",
        "filename" : ".gitattributes",
        "fileFormat" : "UNKNOWN",
        "fileSize" : 66
      }, {
        "assetId" : "d73e4959-e135-43d0-a3a2-84a08a1345f0",
        "name" : "1d9a7d1e-132c-4eba-9ae9-73d087420060/d73e4959-e135-43d0-a3a2-84a08a1345f0.json",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "TEST_DATA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "d23455d2f14209d8d72ce82a9ada7b9e6a8f2cdb2de075ef53f03c14ccb335c7"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/1d9a7d1e-132c-4eba-9ae9-73d087420060/d73e4959-e135-43d0-a3a2-84a08a1345f0.json",
        "filename" : "test_data.json",
        "fileFormat" : "JSON",
        "fileSize" : 95686
      }, {
        "assetId" : "a1280873-eaaa-495c-91f7-5e0e1a5a4e9a",
        "name" : "1d9a7d1e-132c-4eba-9ae9-73d087420060/a1280873-eaaa-495c-91f7-5e0e1a5a4e9a.pickle",
        "assetType" : "EXTERNAL_FILE",
        "assetRole" : "WEIGHTS_FILE",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "S3_REPOSITORY",
          "secure" : true,
          "host" : "mocaasin-test-s3.s3.us-east-2.amazonaws.com",
          "port" : 443,
          "region" : "us-east-2"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "contentHash" : {
          "hashType" : "SHA-256",
          "hexString" : "2933ba9685f584cab69a161193b0e4ec2050ceaa9ad93521e162daead120d473"
        },
        "fileUrl" : "https://mocaasin-test-s3.s3.us-east-2.amazonaws.com/1d9a7d1e-132c-4eba-9ae9-73d087420060/a1280873-eaaa-495c-91f7-5e0e1a5a4e9a.pickle",
        "filename" : "logreg_classifier.pickle",
        "fileFormat" : "UNKNOWN",
        "fileSize" : 16498
      }, {
        "assetId" : "dee68118-6803-405e-be9b-4cfa06b6d60b",
        "assetType" : "FILE",
        "assetRole" : "MODEL_SCHEMA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "filename" : "output_schema.avsc",
        "fileFormat" : "UNKNOWN",
        "localFile" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060/output_schema.avsc",
        "fileSize" : 2469,
        "fileContentString" : "{\n    \"type\": \"array\",\n    \"items\": {\n        \"type\": \"record\",\n        \"name\": \"output_schema.avsc\",\n        \"fields\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"int\"\n            },\n            {\n                \"name\": \"number_people_liable\",\n                \"type\": \"int\"\n            },\n            {\n                \"name\": \"age_years\",\n                \"type\": \"int\"\n            },\n            {\n                \"name\": \"present_employment_since\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"job\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"housing\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"telephone\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"installment_plans\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"number_existing_credits\",\n                \"type\": \"int\"\n            },\n            {\n                \"name\": \"credit_history\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"foreign_worker\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"property\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"installment_rate\",\n                \"type\": \"int\"\n            },\n            {\n                \"name\": \"purpose\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"checking_status\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"present_residence_since\",\n                \"type\": \"int\"\n            },\n            {\n                \"name\": \"debtors_guarantors\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"savings_account\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"duration_months\",\n                \"type\": \"int\"\n            },\n            {\n                \"name\": \"credit_amount\",\n                \"type\": \"int\"\n            },\n            {\n                \"name\": \"gender\",\n                \"type\": \"string\"\n            },\n            {\n                \"name\": \"label_value\",\n                \"type\": \"int\"\n            },\n            {\n              \"name\": \"score\",\n              \"type\": \"int\"\n           }\n        ]\n     }\n}\n",
        "fileContent" : "ewogICAgInR5cGUiOiAiYXJyYXkiLAogICAgIml0ZW1zIjogewogICAgICAgICJ0eXBlIjogInJlY29yZCIsCiAgICAgICAgIm5hbWUiOiAib3V0cHV0X3NjaGVtYS5hdnNjIiwKICAgICAgICAiZmllbGRzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAibmFtZSI6ICJpZCIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJuYW1lIjogIm51bWJlcl9wZW9wbGVfbGlhYmxlIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogImludCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAiYWdlX3llYXJzIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogImludCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAicHJlc2VudF9lbXBsb3ltZW50X3NpbmNlIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAiam9iIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAiaG91c2luZyIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJuYW1lIjogInRlbGVwaG9uZSIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJuYW1lIjogImluc3RhbGxtZW50X3BsYW5zIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAibnVtYmVyX2V4aXN0aW5nX2NyZWRpdHMiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiaW50IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAibmFtZSI6ICJjcmVkaXRfaGlzdG9yeSIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJuYW1lIjogImZvcmVpZ25fd29ya2VyIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAicHJvcGVydHkiLAogICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAibmFtZSI6ICJpbnN0YWxsbWVudF9yYXRlIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogImludCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAicHVycG9zZSIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJuYW1lIjogImNoZWNraW5nX3N0YXR1cyIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJuYW1lIjogInByZXNlbnRfcmVzaWRlbmNlX3NpbmNlIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogImludCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAiZGVidG9yc19ndWFyYW50b3JzIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAic2F2aW5nc19hY2NvdW50IiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAiZHVyYXRpb25fbW9udGhzIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogImludCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgIm5hbWUiOiAiY3JlZGl0X2Ftb3VudCIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJuYW1lIjogImdlbmRlciIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJuYW1lIjogImxhYmVsX3ZhbHVlIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogImludCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJuYW1lIjogInNjb3JlIiwKICAgICAgICAgICAgICAidHlwZSI6ICJpbnQiCiAgICAgICAgICAgfQogICAgICAgIF0KICAgICB9Cn0K"
      }, {
        "assetId" : "23672a66-ab56-4217-b410-19f3b87fa979",
        "assetType" : "FILE",
        "assetRole" : "MODEL_SCHEMA",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "filename" : "input_schema.avsc",
        "fileFormat" : "UNKNOWN",
        "localFile" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060/input_schema.avsc",
        "fileSize" : 5717,
        "fileContentString" : "{\n  \"name\": \"input_schema.avsc\",\n  \"type\": \"record\",\n  \"fields\": [\n    {\n      \"name\": \"id\",\n      \"type\": \"int\",\n      \"dataClass\": \"numerical\",\n      \"role\": \"identifier\",\n      \"protectedClass\": false,\n      \"driftCandidate\": false,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"duration_months\",\n      \"type\": \"int\",\n      \"dataClass\": \"numerical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"credit_amount\",\n      \"type\": \"float\",\n      \"dataClass\": \"numerical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"installment_rate\",\n      \"type\": \"int\",\n      \"dataClass\": \"numerical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"present_residence_since\",\n      \"type\": \"int\",\n      \"dataClass\": \"numerical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"age_years\",\n      \"type\": \"int\",\n      \"dataClass\": \"numerical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"number_existing_credits\",\n      \"type\": \"int\",\n      \"dataClass\": \"numerical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"checking_status\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"credit_history\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"purpose\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"savings_account\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"present_employment_since\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"debtors_guarantors\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"property\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"installment_plans\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"housing\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"job\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"number_people_liable\",\n      \"type\": \"int\",\n      \"dataClass\": \"numerical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"telephone\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"foreign_worker\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": false\n    },\n    {\n      \"name\": \"gender\",\n      \"type\": \"string\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"predictor\",\n      \"protectedClass\": true,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": true\n    },\n    {\n      \"name\": \"label_value\",\n      \"type\": \"int\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"label\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": true\n    },\n    {\n      \"name\": \"score\",\n      \"type\": \"int\",\n      \"dataClass\": \"categorical\",\n      \"role\": \"score\",\n      \"protectedClass\": false,\n      \"driftCandidate\": true,\n      \"specialValues\": [],\n      \"scoringOptional\": true\n    }\n  ]\n}\n",
        "fileContent" : "ewogICJuYW1lIjogImlucHV0X3NjaGVtYS5hdnNjIiwKICAidHlwZSI6ICJyZWNvcmQiLAogICJmaWVsZHMiOiBbCiAgICB7CiAgICAgICJuYW1lIjogImlkIiwKICAgICAgInR5cGUiOiAiaW50IiwKICAgICAgImRhdGFDbGFzcyI6ICJudW1lcmljYWwiLAogICAgICAicm9sZSI6ICJpZGVudGlmaWVyIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IGZhbHNlLAogICAgICAic3BlY2lhbFZhbHVlcyI6IFtdLAogICAgICAic2NvcmluZ09wdGlvbmFsIjogZmFsc2UKICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogImR1cmF0aW9uX21vbnRocyIsCiAgICAgICJ0eXBlIjogImludCIsCiAgICAgICJkYXRhQ2xhc3MiOiAibnVtZXJpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiY3JlZGl0X2Ftb3VudCIsCiAgICAgICJ0eXBlIjogImZsb2F0IiwKICAgICAgImRhdGFDbGFzcyI6ICJudW1lcmljYWwiLAogICAgICAicm9sZSI6ICJwcmVkaWN0b3IiLAogICAgICAicHJvdGVjdGVkQ2xhc3MiOiBmYWxzZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJpbnN0YWxsbWVudF9yYXRlIiwKICAgICAgInR5cGUiOiAiaW50IiwKICAgICAgImRhdGFDbGFzcyI6ICJudW1lcmljYWwiLAogICAgICAicm9sZSI6ICJwcmVkaWN0b3IiLAogICAgICAicHJvdGVjdGVkQ2xhc3MiOiBmYWxzZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJwcmVzZW50X3Jlc2lkZW5jZV9zaW5jZSIsCiAgICAgICJ0eXBlIjogImludCIsCiAgICAgICJkYXRhQ2xhc3MiOiAibnVtZXJpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiYWdlX3llYXJzIiwKICAgICAgInR5cGUiOiAiaW50IiwKICAgICAgImRhdGFDbGFzcyI6ICJudW1lcmljYWwiLAogICAgICAicm9sZSI6ICJwcmVkaWN0b3IiLAogICAgICAicHJvdGVjdGVkQ2xhc3MiOiBmYWxzZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJudW1iZXJfZXhpc3RpbmdfY3JlZGl0cyIsCiAgICAgICJ0eXBlIjogImludCIsCiAgICAgICJkYXRhQ2xhc3MiOiAibnVtZXJpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiY2hlY2tpbmdfc3RhdHVzIiwKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRhdGFDbGFzcyI6ICJjYXRlZ29yaWNhbCIsCiAgICAgICJyb2xlIjogInByZWRpY3RvciIsCiAgICAgICJwcm90ZWN0ZWRDbGFzcyI6IGZhbHNlLAogICAgICAiZHJpZnRDYW5kaWRhdGUiOiB0cnVlLAogICAgICAic3BlY2lhbFZhbHVlcyI6IFtdLAogICAgICAic2NvcmluZ09wdGlvbmFsIjogZmFsc2UKICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogImNyZWRpdF9oaXN0b3J5IiwKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRhdGFDbGFzcyI6ICJjYXRlZ29yaWNhbCIsCiAgICAgICJyb2xlIjogInByZWRpY3RvciIsCiAgICAgICJwcm90ZWN0ZWRDbGFzcyI6IGZhbHNlLAogICAgICAiZHJpZnRDYW5kaWRhdGUiOiB0cnVlLAogICAgICAic3BlY2lhbFZhbHVlcyI6IFtdLAogICAgICAic2NvcmluZ09wdGlvbmFsIjogZmFsc2UKICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogInB1cnBvc2UiLAogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGF0YUNsYXNzIjogImNhdGVnb3JpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAic2F2aW5nc19hY2NvdW50IiwKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRhdGFDbGFzcyI6ICJjYXRlZ29yaWNhbCIsCiAgICAgICJyb2xlIjogInByZWRpY3RvciIsCiAgICAgICJwcm90ZWN0ZWRDbGFzcyI6IGZhbHNlLAogICAgICAiZHJpZnRDYW5kaWRhdGUiOiB0cnVlLAogICAgICAic3BlY2lhbFZhbHVlcyI6IFtdLAogICAgICAic2NvcmluZ09wdGlvbmFsIjogZmFsc2UKICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogInByZXNlbnRfZW1wbG95bWVudF9zaW5jZSIsCiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkYXRhQ2xhc3MiOiAiY2F0ZWdvcmljYWwiLAogICAgICAicm9sZSI6ICJwcmVkaWN0b3IiLAogICAgICAicHJvdGVjdGVkQ2xhc3MiOiBmYWxzZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJkZWJ0b3JzX2d1YXJhbnRvcnMiLAogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGF0YUNsYXNzIjogImNhdGVnb3JpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAicHJvcGVydHkiLAogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGF0YUNsYXNzIjogImNhdGVnb3JpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiaW5zdGFsbG1lbnRfcGxhbnMiLAogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGF0YUNsYXNzIjogImNhdGVnb3JpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAiaG91c2luZyIsCiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkYXRhQ2xhc3MiOiAiY2F0ZWdvcmljYWwiLAogICAgICAicm9sZSI6ICJwcmVkaWN0b3IiLAogICAgICAicHJvdGVjdGVkQ2xhc3MiOiBmYWxzZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJqb2IiLAogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGF0YUNsYXNzIjogImNhdGVnb3JpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiBmYWxzZQogICAgfSwKICAgIHsKICAgICAgIm5hbWUiOiAibnVtYmVyX3Blb3BsZV9saWFibGUiLAogICAgICAidHlwZSI6ICJpbnQiLAogICAgICAiZGF0YUNsYXNzIjogIm51bWVyaWNhbCIsCiAgICAgICJyb2xlIjogInByZWRpY3RvciIsCiAgICAgICJwcm90ZWN0ZWRDbGFzcyI6IGZhbHNlLAogICAgICAiZHJpZnRDYW5kaWRhdGUiOiB0cnVlLAogICAgICAic3BlY2lhbFZhbHVlcyI6IFtdLAogICAgICAic2NvcmluZ09wdGlvbmFsIjogZmFsc2UKICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogInRlbGVwaG9uZSIsCiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkYXRhQ2xhc3MiOiAiY2F0ZWdvcmljYWwiLAogICAgICAicm9sZSI6ICJwcmVkaWN0b3IiLAogICAgICAicHJvdGVjdGVkQ2xhc3MiOiBmYWxzZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJmb3JlaWduX3dvcmtlciIsCiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkYXRhQ2xhc3MiOiAiY2F0ZWdvcmljYWwiLAogICAgICAicm9sZSI6ICJwcmVkaWN0b3IiLAogICAgICAicHJvdGVjdGVkQ2xhc3MiOiBmYWxzZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IGZhbHNlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJnZW5kZXIiLAogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGF0YUNsYXNzIjogImNhdGVnb3JpY2FsIiwKICAgICAgInJvbGUiOiAicHJlZGljdG9yIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogdHJ1ZSwKICAgICAgImRyaWZ0Q2FuZGlkYXRlIjogdHJ1ZSwKICAgICAgInNwZWNpYWxWYWx1ZXMiOiBbXSwKICAgICAgInNjb3JpbmdPcHRpb25hbCI6IHRydWUKICAgIH0sCiAgICB7CiAgICAgICJuYW1lIjogImxhYmVsX3ZhbHVlIiwKICAgICAgInR5cGUiOiAiaW50IiwKICAgICAgImRhdGFDbGFzcyI6ICJjYXRlZ29yaWNhbCIsCiAgICAgICJyb2xlIjogImxhYmVsIiwKICAgICAgInByb3RlY3RlZENsYXNzIjogZmFsc2UsCiAgICAgICJkcmlmdENhbmRpZGF0ZSI6IHRydWUsCiAgICAgICJzcGVjaWFsVmFsdWVzIjogW10sCiAgICAgICJzY29yaW5nT3B0aW9uYWwiOiB0cnVlCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJzY29yZSIsCiAgICAgICJ0eXBlIjogImludCIsCiAgICAgICJkYXRhQ2xhc3MiOiAiY2F0ZWdvcmljYWwiLAogICAgICAicm9sZSI6ICJzY29yZSIsCiAgICAgICJwcm90ZWN0ZWRDbGFzcyI6IGZhbHNlLAogICAgICAiZHJpZnRDYW5kaWRhdGUiOiB0cnVlLAogICAgICAic3BlY2lhbFZhbHVlcyI6IFtdLAogICAgICAic2NvcmluZ09wdGlvbmFsIjogdHJ1ZQogICAgfQogIF0KfQo="
      }, {
        "assetId" : "c4591039-c28d-4ecb-a2fd-1fa6e604f3c7",
        "assetType" : "FILE",
        "assetRole" : "README_FILE",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "filename" : "README.md",
        "fileFormat" : "UNKNOWN",
        "localFile" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060/README.md",
        "fileSize" : 2879,
        "fileContentString" : "# german_credit_python\n \nA Logistic Regression Python model to predict loan default.\n\n## Running Locally\n\nTo run this model locally, create a new Python 3.6.8 virtual environment\n(such as with `pyenv`). Then, use the following command to update `pip`\nand `setuptools`:\n\n```\npip3 install --upgrade setuptools\npip3 install --upgrade pip\n```\n\nAnd install the required libraries:\n\n```\npip3 install -r requirements.txt\n```\n\n## Details\n\nModel was trained on the German Credit Data dataset.\n`logreg_classifier.pickle` is the trained model artifact.\n\n## Scoring Jobs\n\n### Sample Inputs\n\nChoose **one** of\n - `df_baseline.json`\n - `df_sample.json`\n\n### Schema Checking\n\nScoring Jobs can be run with any combination of input/output schema checking.\n\n### Sample Output\n\nThe output of the scoring job when the input data is `df_sample.json` is a JSONS file (one-line JSON records). Here are the first three output records:\n```json\n[{\"id\": 993, \"duration_months\": 36, \"credit_amount\": 3959, \"installment_rate\": 4, \"present_residence_since\": 3, \"age_years\": 30, \"number_existing_credits\": 1, \"checking_status\": \"A11\", \"credit_history\": \"A32\", \"purpose\": \"A42\", \"savings_account\": \"A61\", \"present_employment_since\": \"A71\", \"debtors_guarantors\": \"A101\", \"property\": \"A122\", \"installment_plans\": \"A143\", \"housing\": \"A152\", \"job\": \"A174\", \"number_people_liable\": 1, \"telephone\": \"A192\", \"foreign_worker\": \"A201\", \"gender\": \"male\", \"label\": 0, \"predicted_score\": 1}]\n[{\"id\": 859, \"duration_months\": 9, \"credit_amount\": 3577, \"installment_rate\": 1, \"present_residence_since\": 2, \"age_years\": 26, \"number_existing_credits\": 1, \"checking_status\": \"A14\", \"credit_history\": \"A32\", \"purpose\": \"A40\", \"savings_account\": \"A62\", \"present_employment_since\": \"A73\", \"debtors_guarantors\": \"A103\", \"property\": \"A121\", \"installment_plans\": \"A143\", \"housing\": \"A151\", \"job\": \"A173\", \"number_people_liable\": 2, \"telephone\": \"A191\", \"foreign_worker\": \"A202\", \"gender\": \"male\", \"label\": 0, \"predicted_score\": 0}]\n[{\"id\": 298, \"duration_months\": 18, \"credit_amount\": 2515, \"installment_rate\": 3, \"present_residence_since\": 4, \"age_years\": 43, \"number_existing_credits\": 1, \"checking_status\": \"A14\", \"credit_history\": \"A32\", \"purpose\": \"A42\", \"savings_account\": \"A61\", \"present_employment_since\": \"A73\", \"debtors_guarantors\": \"A101\", \"property\": \"A121\", \"installment_plans\": \"A143\", \"housing\": \"A152\", \"job\": \"A173\", \"number_people_liable\": 1, \"telephone\": \"A192\", \"foreign_worker\": \"A201\", \"gender\": \"male\", \"label\": 0, \"predicted_score\": 0}]\n```\n\n## Metrics Jobs\n\nModel code includes a metrics function used to compute Group and Bias metrics.\nThe metrics function expects a DataFrame with at lease the following three columns three columns: `score` (predicted), `label_value` (actual), and `gender` (protected attribute).\n\n### Sample Inputs\n\nChoose **one** of\n - `df_baseline_scored.json`\n - `df_sample_scored.json`\n",
        "fileContent" : "IyBnZXJtYW5fY3JlZGl0X3B5dGhvbgogCkEgTG9naXN0aWMgUmVncmVzc2lvbiBQeXRob24gbW9kZWwgdG8gcHJlZGljdCBsb2FuIGRlZmF1bHQuCgojIyBSdW5uaW5nIExvY2FsbHkKClRvIHJ1biB0aGlzIG1vZGVsIGxvY2FsbHksIGNyZWF0ZSBhIG5ldyBQeXRob24gMy42LjggdmlydHVhbCBlbnZpcm9ubWVudAooc3VjaCBhcyB3aXRoIGBweWVudmApLiBUaGVuLCB1c2UgdGhlIGZvbGxvd2luZyBjb21tYW5kIHRvIHVwZGF0ZSBgcGlwYAphbmQgYHNldHVwdG9vbHNgOgoKYGBgCnBpcDMgaW5zdGFsbCAtLXVwZ3JhZGUgc2V0dXB0b29scwpwaXAzIGluc3RhbGwgLS11cGdyYWRlIHBpcApgYGAKCkFuZCBpbnN0YWxsIHRoZSByZXF1aXJlZCBsaWJyYXJpZXM6CgpgYGAKcGlwMyBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQKYGBgCgojIyBEZXRhaWxzCgpNb2RlbCB3YXMgdHJhaW5lZCBvbiB0aGUgR2VybWFuIENyZWRpdCBEYXRhIGRhdGFzZXQuCmBsb2dyZWdfY2xhc3NpZmllci5waWNrbGVgIGlzIHRoZSB0cmFpbmVkIG1vZGVsIGFydGlmYWN0LgoKIyMgU2NvcmluZyBKb2JzCgojIyMgU2FtcGxlIElucHV0cwoKQ2hvb3NlICoqb25lKiogb2YKIC0gYGRmX2Jhc2VsaW5lLmpzb25gCiAtIGBkZl9zYW1wbGUuanNvbmAKCiMjIyBTY2hlbWEgQ2hlY2tpbmcKClNjb3JpbmcgSm9icyBjYW4gYmUgcnVuIHdpdGggYW55IGNvbWJpbmF0aW9uIG9mIGlucHV0L291dHB1dCBzY2hlbWEgY2hlY2tpbmcuCgojIyMgU2FtcGxlIE91dHB1dAoKVGhlIG91dHB1dCBvZiB0aGUgc2NvcmluZyBqb2Igd2hlbiB0aGUgaW5wdXQgZGF0YSBpcyBgZGZfc2FtcGxlLmpzb25gIGlzIGEgSlNPTlMgZmlsZSAob25lLWxpbmUgSlNPTiByZWNvcmRzKS4gSGVyZSBhcmUgdGhlIGZpcnN0IHRocmVlIG91dHB1dCByZWNvcmRzOgpgYGBqc29uClt7ImlkIjogOTkzLCAiZHVyYXRpb25fbW9udGhzIjogMzYsICJjcmVkaXRfYW1vdW50IjogMzk1OSwgImluc3RhbGxtZW50X3JhdGUiOiA0LCAicHJlc2VudF9yZXNpZGVuY2Vfc2luY2UiOiAzLCAiYWdlX3llYXJzIjogMzAsICJudW1iZXJfZXhpc3RpbmdfY3JlZGl0cyI6IDEsICJjaGVja2luZ19zdGF0dXMiOiAiQTExIiwgImNyZWRpdF9oaXN0b3J5IjogIkEzMiIsICJwdXJwb3NlIjogIkE0MiIsICJzYXZpbmdzX2FjY291bnQiOiAiQTYxIiwgInByZXNlbnRfZW1wbG95bWVudF9zaW5jZSI6ICJBNzEiLCAiZGVidG9yc19ndWFyYW50b3JzIjogIkExMDEiLCAicHJvcGVydHkiOiAiQTEyMiIsICJpbnN0YWxsbWVudF9wbGFucyI6ICJBMTQzIiwgImhvdXNpbmciOiAiQTE1MiIsICJqb2IiOiAiQTE3NCIsICJudW1iZXJfcGVvcGxlX2xpYWJsZSI6IDEsICJ0ZWxlcGhvbmUiOiAiQTE5MiIsICJmb3JlaWduX3dvcmtlciI6ICJBMjAxIiwgImdlbmRlciI6ICJtYWxlIiwgImxhYmVsIjogMCwgInByZWRpY3RlZF9zY29yZSI6IDF9XQpbeyJpZCI6IDg1OSwgImR1cmF0aW9uX21vbnRocyI6IDksICJjcmVkaXRfYW1vdW50IjogMzU3NywgImluc3RhbGxtZW50X3JhdGUiOiAxLCAicHJlc2VudF9yZXNpZGVuY2Vfc2luY2UiOiAyLCAiYWdlX3llYXJzIjogMjYsICJudW1iZXJfZXhpc3RpbmdfY3JlZGl0cyI6IDEsICJjaGVja2luZ19zdGF0dXMiOiAiQTE0IiwgImNyZWRpdF9oaXN0b3J5IjogIkEzMiIsICJwdXJwb3NlIjogIkE0MCIsICJzYXZpbmdzX2FjY291bnQiOiAiQTYyIiwgInByZXNlbnRfZW1wbG95bWVudF9zaW5jZSI6ICJBNzMiLCAiZGVidG9yc19ndWFyYW50b3JzIjogIkExMDMiLCAicHJvcGVydHkiOiAiQTEyMSIsICJpbnN0YWxsbWVudF9wbGFucyI6ICJBMTQzIiwgImhvdXNpbmciOiAiQTE1MSIsICJqb2IiOiAiQTE3MyIsICJudW1iZXJfcGVvcGxlX2xpYWJsZSI6IDIsICJ0ZWxlcGhvbmUiOiAiQTE5MSIsICJmb3JlaWduX3dvcmtlciI6ICJBMjAyIiwgImdlbmRlciI6ICJtYWxlIiwgImxhYmVsIjogMCwgInByZWRpY3RlZF9zY29yZSI6IDB9XQpbeyJpZCI6IDI5OCwgImR1cmF0aW9uX21vbnRocyI6IDE4LCAiY3JlZGl0X2Ftb3VudCI6IDI1MTUsICJpbnN0YWxsbWVudF9yYXRlIjogMywgInByZXNlbnRfcmVzaWRlbmNlX3NpbmNlIjogNCwgImFnZV95ZWFycyI6IDQzLCAibnVtYmVyX2V4aXN0aW5nX2NyZWRpdHMiOiAxLCAiY2hlY2tpbmdfc3RhdHVzIjogIkExNCIsICJjcmVkaXRfaGlzdG9yeSI6ICJBMzIiLCAicHVycG9zZSI6ICJBNDIiLCAic2F2aW5nc19hY2NvdW50IjogIkE2MSIsICJwcmVzZW50X2VtcGxveW1lbnRfc2luY2UiOiAiQTczIiwgImRlYnRvcnNfZ3VhcmFudG9ycyI6ICJBMTAxIiwgInByb3BlcnR5IjogIkExMjEiLCAiaW5zdGFsbG1lbnRfcGxhbnMiOiAiQTE0MyIsICJob3VzaW5nIjogIkExNTIiLCAiam9iIjogIkExNzMiLCAibnVtYmVyX3Blb3BsZV9saWFibGUiOiAxLCAidGVsZXBob25lIjogIkExOTIiLCAiZm9yZWlnbl93b3JrZXIiOiAiQTIwMSIsICJnZW5kZXIiOiAibWFsZSIsICJsYWJlbCI6IDAsICJwcmVkaWN0ZWRfc2NvcmUiOiAwfV0KYGBgCgojIyBNZXRyaWNzIEpvYnMKCk1vZGVsIGNvZGUgaW5jbHVkZXMgYSBtZXRyaWNzIGZ1bmN0aW9uIHVzZWQgdG8gY29tcHV0ZSBHcm91cCBhbmQgQmlhcyBtZXRyaWNzLgpUaGUgbWV0cmljcyBmdW5jdGlvbiBleHBlY3RzIGEgRGF0YUZyYW1lIHdpdGggYXQgbGVhc2UgdGhlIGZvbGxvd2luZyB0aHJlZSBjb2x1bW5zIHRocmVlIGNvbHVtbnM6IGBzY29yZWAgKHByZWRpY3RlZCksIGBsYWJlbF92YWx1ZWAgKGFjdHVhbCksIGFuZCBgZ2VuZGVyYCAocHJvdGVjdGVkIGF0dHJpYnV0ZSkuCgojIyMgU2FtcGxlIElucHV0cwoKQ2hvb3NlICoqb25lKiogb2YKIC0gYGRmX2Jhc2VsaW5lX3Njb3JlZC5qc29uYAogLSBgZGZfc2FtcGxlX3Njb3JlZC5qc29uYAo="
      }, {
        "assetId" : "973269af-5e89-46cb-b3a6-28be03d77a17",
        "assetType" : "FILE",
        "assetRole" : "REQUIRED_LIBRARIES",
        "metaData" : {
          "custom" : { },
          "tags" : [ ]
        },
        "repositoryInfo" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "importedRepository" : {
          "repositoryType" : "GIT_REPO",
          "repositoryDirectory" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060",
          "repositoryRemote" : "https://github.com/betoca/german_credit_python",
          "repositoryBranch" : "extended_schema_mrm",
          "lastCommitId" : "7296cb592dc6816e21da83006e570b0a30f8af95",
          "lastSyncStatus" : "SUCCESS",
          "lastSyncMessages" : "2022-03-03T06:39:09.283Z: https://github.com/betoca/german_credit_python successfully updated",
          "lastSyncDate" : "2022-03-03T06:39:09.283Z",
          "lastCommitDate" : "2021-10-12T22:24:10Z"
        },
        "filename" : "requirements.txt",
        "fileFormat" : "UNKNOWN",
        "localFile" : "/tmp/model-manage-repos/extended_schema_mrm/1d9a7d1e-132c-4eba-9ae9-73d087420060/requirements.txt",
        "fileSize" : 76,
        "fileContentString" : "aequitas==0.42.0\nnumpy==1.19.5\npandas==1.1.5\nscikit-learn==0.22\nscipy==1.5.4",
        "fileContent" : "YWVxdWl0YXM9PTAuNDIuMApudW1weT09MS4xOS41CnBhbmRhcz09MS4xLjUKc2Npa2l0LWxlYXJuPT0wLjIyCnNjaXB5PT0xLjUuNA=="
      } ],
      "gitDifferences" : [ ],
      "associatedModels" : [ ],
      "requiredAssets" : [ ]
    },
    "modelMLCs" : [ {
      "processInstance" : {
        "rootProcessInstanceId" : "faafe336-9abd-11ec-be8e-427774fea553",
        "processDefinitionName" : "Deploy with Run test and Jira",
        "processDefinitionKey" : "Process_154ms47",
        "processDefinitionVersion" : 3,
        "processDefinitionId" : "Process_154ms47:3:010a7827-8a51-11ec-bca5-5a48e0cc2be6",
        "startTime" : "2022-03-03T06:48:48.697+00:00",
        "endTime" : "2022-03-03T06:49:11.000+00:00",
        "durationInMillis" : 22603,
        "startActivityId" : "Event_16i5t76",
        "state" : "COMPLETED"
      },
      "activityInstances" : [ {
        "parentActivityInstanceId" : "faafe336-9abd-11ec-be8e-427774fea553",
        "activityId" : "Event_16i5t76",
        "activityName" : "Deployable Model\nCreated",
        "activityType" : "conditionalStartEvent",
        "processDefinitionKey" : "Process_154ms47",
        "processDefinitionId" : "Process_154ms47:3:010a7827-8a51-11ec-bca5-5a48e0cc2be6",
        "processInstanceId" : "faafe336-9abd-11ec-be8e-427774fea553",
        "executionId" : "faafe336-9abd-11ec-be8e-427774fea553",
        "startTime" : "2022-03-03T06:48:48.702+00:00",
        "endTime" : "2022-03-03T06:48:48.893+00:00",
        "durationInMillis" : 191,
        "canceled" : false,
        "completeScope" : false,
        "rootProcessInstanceId" : "faafe336-9abd-11ec-be8e-427774fea553"
      }, {
        "parentActivityInstanceId" : "faafe336-9abd-11ec-be8e-427774fea553",
        "activityId" : "Activity_0zc4cuv",
        "activityName" : "Get Updated Snapshot\n",
        "activityType" : "serviceTask",
        "canceled" : false,
        "completeScope" : false
      }, {
        "parentActivityInstanceId" : "faafe336-9abd-11ec-be8e-427774fea553",
        "activityId" : "Gateway_0kmw05n",
        "activityName" : "Model Requires Training?",
        "activityType" : "exclusiveGateway",
        "startTime" : "2022-03-03T06:48:49.379+00:00",
        "endTime" : "2022-03-03T06:48:49.407+00:00",
        "durationInMillis" : 28,
        "canceled" : false,
        "completeScope" : false
      }, {
        "parentActivityInstanceId" : "faafe336-9abd-11ec-be8e-427774fea553",
        "activityId" : "Gateway_107xhpa",
        "activityName" : "Model requries test?",
        "activityType" : "exclusiveGateway",
        "startTime" : "2022-03-03T06:48:49.604+00:00",
        "endTime" : "2022-03-03T06:48:49.700+00:00",
        "durationInMillis" : 96,
        "canceled" : false,
        "completeScope" : false
      }, {
        "parentActivityInstanceId" : "faafe336-9abd-11ec-be8e-427774fea553",
        "activityId" : "Activity_0p7d40h",
        "activityName" : "Deploy Model",
        "activityType" : "serviceTask",
        "startTime" : "2022-03-03T06:48:49.970+00:00",
        "endTime" : "2022-03-03T06:49:10.292+00:00",
        "durationInMillis" : 20322,
        "canceled" : false,
        "completeScope" : false
      }, {
        "parentActivityInstanceId" : "faafe336-9abd-11ec-be8e-427774fea553",
        "activityId" : "EndProces",
        "activityType" : "terminateEndEvent",
        "startTime" : "2022-03-03T06:49:10.783+00:00",
        "endTime" : "2022-03-03T06:49:11.086+00:00",
        "durationInMillis" : 303,
        "canceled" : false,
        "completeScope" : true
      } ]
    } ],
    "metaData" : {
      "custom" : { },
      "tags" : [ "batch_prod" ],
      "name" : "german_credit_python-20220302_2348"
    },
    "associatedModels" : [ ],
    "modelDocuments" : [ ],
    "targetRuntimes" : [ {
      "engineType" : "MODEL_OP_ENGINE",
      "inputEndpoints" : [ ],
      "outputEndpoints" : [ ],
      "tags" : [ "batch_prod" ],
      "inProduction" : false,
      "lastActivity" : { }
    } ]
  },
  "modelWritesOutput" : false,
  "additionalAssets" : [ ],
  "_links" : {
    "self" : {
      "href" : "http://mocaasin.modelop.center/api/modelBatchTestJob/8b0ef319-6750-4f91-b358-11982a9be1e2"
    },
    "modelBatchTestJob" : {
      "href" : "http://mocaasin.modelop.center/api/modelBatchTestJob/8b0ef319-6750-4f91-b358-11982a9be1e2"
    }
  }
}